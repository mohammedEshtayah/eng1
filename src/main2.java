import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class main2 {

	private JFrame frame;
	private JTextField Solar_time;
	private JTextField Aceiling;
	private JTextField Ti_T0;
	private JTextField Qcooling_ceiling;
	private JTextField Qcooling_wall;
	private JTextField AGlass1;
	private JTextField Qtrans_throng_glass; 
	private JTextField Normail_Thickness2;
	private JTextField Qconv_H_Gain;
	private JTextField Hours_after_each_into_space;
	private JTextField Total_Hours_space;
	private JTextField QL_people_cooling;
	private JTextField QS_people_cooling;
	private JTextField Qlighting;
	private JTextField number_of_hoursr_after_lights;
	private JTextField W_Lihting_Capacity;
	private JTextField QL_quipment;
	private JTextField QS_Equipment;
	private JTextField run_hour;
	private JTextField number_of_hour;
	private JTextField AGlass3;
	private JTextField AGlass4;
	private JTextField Awall1;
	private JTextField Awall2;
	private JTextField Awall3;
	private JTextField Awall4;
	private JTextField Awin1;
	private JTextField Awin2;
	private JTextField Awin3;
	private JTextField Awin4;
	private JTextField lm;
 
	/**
	 * Launch the application.
	 */
	public static void main22(double Uceiling ,double n,double Uwin,double Awin,double output3 ,double output4,String city,int Region,double Uwall ) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					main2 window = new main2( Uceiling ,n ,Uwin,Awin ,output3 ,output4 ,city,Region ,Uwall);
					
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public main2(double Uceiling ,double n ,double Uwin,double Awin,double output3 ,double output4,String city,int Region,double Uwall ) {
		 
		initialize(Uceiling ,n ,Uwin,Awin,output3 ,output4, city,Region,Uwall); 
		}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize(double Uceiling ,double n ,double Uwin,double Awin,double output3 ,double output4,String city,int Region,double Uwall) {
		System.out.println("Uceiling"+Uceiling+" n"+n +" output3 "+output3 +" output4 "+output4 +"city "+city);
		BoundsPopupMenuListener listener =     new BoundsPopupMenuListener(true, false);
		frame = new JFrame();
		Dimension size =  Toolkit.getDefaultToolkit().getScreenSize();
		frame.setBounds( 0, 0, size.width, size.height );
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		 
		Hash<String,String,Integer> R_9_1 = new Hash<String,String,Integer>();
		 
		 R_9_1.put("without suspended","steel sheet with 25.4mm(or 50.8mm) insulation",0); 
		 R_9_1.put("without suspended","25-mm wood with 25.4 mm insulation",1); 
		 R_9_1.put( "without suspended","101.6 mm L.W concrete",2); 
		 R_9_1.put( "without suspended","50.8 mm H.W concrete 25.4 mm insultion",3); 
		 R_9_1.put( "without suspended","25.4 mm wood with 50.8 insultion",4); 
		 R_9_1.put("without suspended", "152.4 mm L.W concrete",5); 
		 R_9_1.put("without suspended","63.5 mm wood with 25.4 mm insulation",6); 
		 R_9_1.put("without suspended", "203.4 mm L.W concrete",7); 
		 R_9_1.put("without suspended","101.6 mm H.W concrete with 25.4mm(or 50.8mm) insulation",8); 
		 R_9_1.put( "without suspended","63.5 mm wood with 50.8 insultion",9); 
		 R_9_1.put( "without suspended","Roof terrace system",10); 
		 R_9_1.put("without suspended","152.4 mm H.W concrete with 25.4mm(or 50.8mm) insulation",11); 
		 R_9_1.put("without suspended", "101.6.5 mm wood with 25.4mm (or 50.8mm)  insultion",12); 

		 R_9_1.put("with suspended","steel sheet with 25.4mm(or 50.8mm) insulation",13); 
		 R_9_1.put("with suspended","25-mm wood with 25.4 mm insulation",4); 
		 R_9_1.put( "with suspended","101.6 mm L.W concrete",15); 
		 R_9_1.put( "with suspended","50.8 mm H.W concrete 25.4 mm insultion",16); 
		 R_9_1.put( "with suspended","25.4 mm wood with 50.8 insultion",17); 
		 R_9_1.put("with suspended", "152.4 mm L.W concrete",18); 
		 R_9_1.put("with suspended","63.5 mm wood with 25.4 mm insulation",19); 
		 R_9_1.put("with suspended", "203.4 mm L.W concrete",20); 
		 R_9_1.put("with suspended","101.6 mm H.W concrete with 25.4mm(or 50.8mm) insulation",21); 
		 R_9_1.put( "with suspended","63.5 mm wood with 50.8 insultion",22); 
		 R_9_1.put( "with suspended","Roof terrace system",23); 
		 R_9_1.put("with suspended","152.4 mm H.W concrete with 25.4mm(or 50.8mm) insulation",24); 
		 R_9_1.put("with suspended", "101.6.5 mm wood with 25.4mm (or 50.8mm)  insultion",25); 
		 double Table_9_1[][]= {
		  {0, 0 , -1 , -2 , -2 , -3 , -2 , 3 , 11 , 19 , 27 , 34 , 40 , 43 , 44 , 43 , 39 , 33 , 25 , 17 , 10 , 7 , 5 , 3 , 1 },
		  {0, 3 , 2 , 0 , -1 , -2 , -2 , -1 , 2 , 8 , 15 , 22 , 29 , 35 , 39 , 41 , 41 , 39 , 35 , 29 , 21 , 15 , 11 , 8 , 5 },
		  {0, 5 , 3 , 1 , 0 , -1 , -2 , -2 , 1 , 5 , 11 , 18 , 25 , 31 , 36 , 39 , 40 , 40 , 37 , 32 , 25 , 19 , 14 , 10 , 7 },
		  {0, 7 , 5 , 3 ,2 , 0 , -1 , 0 ,2 , 6 , 11 , 17 , 23 , 28 , 33 , 36 , 37 , 37 , 34 , 30 , 25 , 20 , 16 , 12 , 10  },
		  {0, 2 , 0 , -2 ,-3 , -4 , -4 , -4 , -2 , 3 , 9 , 15 , 22 , 27 , 32 , 35 , 36 , 35 , 32 , 27 , 20 , 14 , 10 , 6  ,3 },
		  {0, 12 , 10 , 7 , 5  , 3 , 2 , 1 , 0 , 2 , 4 , 8 , 13 , 18 , 24 , 29 , 33 , 35 , 36 , 35 , 32 , 28 , 24 , 19 , 16   },
		  {0, 16 , 13 , 11 , 9  , 7 , 6 , 4 , 3 , 4 , 5 , 8 , 11 , 15 , 19 , 23 , 27 , 29 , 31 , 31 , 30 , 27 , 25 , 22 , 19   },
		  {0, 20 , 17 , 14 ,12  , 10 , 8 , 6 , 5 , 4 , 4 , 5 , 7 , 11 , 14 , 18 , 22 , 25 , 28 , 30 , 30 , 29 , 27 , 25  ,22 },
		  {0, 14 , 12 , 10 , 8 , 7 , 5 , 4 , 4 , 6 , 8 , 11 , 15 , 18 , 22 , 25 , 28 , 29 ,30 ,29 , 27 , 24 , 21 , 19 , 16 },
		  {0, 18 , 15 , 13 , 11 ,9 , 8 , 6 , 5 , 5 , 5 , 7 , 10 , 13 , 17 , 21 , 24 , 27 , 28 , 29 , 29 , 27 , 25 , 23 , 20 },
		  {0, 19 , 17 , 15 ,14 , 12 , 11 , 9 , 8 , 7 , 8 , 8 , 10 , 12 , 15 , 18 , 20 , 22 , 24 , 25 , 26 , 25 , 24 , 22 ,21 },
		  {0, 18 , 16 , 14 , 12 ,11 , 10 , 9 , 8 , 8 , 9 , 10 , 12 , 15 , 17 , 20 , 22 , 24 , 25 , 25 , 25 , 24 , 22 , 20 , 19   },
		  {0, 21 , 20 , 18 , 17 , 15 , 14 , 13 , 11 , 10 , 9 , 9 ,9 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 23 , 24 , 24 , 23 , 22  },
		  //--------------------------------
		  {0, 1 , 0 , -1 ,-2 , -3 , -3 , 0 , 5 , 13 , 20 , 28 , 35 , 40 , 43 , 43 , 41 , 37 , 31 , 32 , 15 , 10 , 7 , 5  ,3 },
		  {0, 11 , 8 , 6 , 5 , 3 , 2 , 1 , 2 , 4 , 7 , 12 , 17 , 22 , 27 , 31 , 33 , 35 , 34 , 32 , 28 , 24 , 20 , 17  , 14 },
		  {0, 10 , 8 , 6 , 4 , 2 , 1 , 0 , 0 , 2 , 6 , 10 , 16 , 21 , 27 , 31 , 34 , 36 , 36 , 34 , 30 , 26 , 21 , 17  , 13 },
		  {0, 16 , 14 , 13 ,11 , 10 , 8 , 7 , 7 , 8 , 9 , 11 , 14 , 17 , 19 , 22 , 24 , 25 , 26 , 26 , 25 , 23 , 21 , 20  , 18 },
		  {0, 14 , 11 , 9 , 7 , 5 , 4 , 3 , 3 , 4 , 6 , 10 , 14 , 18 , 23 , 27 , 30 , 31 , 32 , 31 , 29 , 26 , 22 , 19 , 16 },
		  {0, 18 , 15 , 13 ,11 , 9 , 7 , 6 , 4 , 4 , 4 , 6 , 9 , 12 , 16 , 20 , 24 , 27 , 20 , 30 , 30 , 38 , 26 , 23  , 20 },
		  {0, 19 , 18 , 16 , 14 , 13 , 12 , 10 , 9 , 8 , 8 , 9 , 10 , 12 , 14 , 17 , 19 , 21 , 23 , 24 , 25 , 24 , 23 , 22  , 21 },
		  {0, 22 , 20 , 18 , 16 , 15 , 13 , 11 , 10 , 9 , 8 , 8 , 8 , 9 , 11 , 14 , 16 , 19 , 21 , 23 , 25 , 25 , 25 , 24  ,23 },
		  {0, 17 , 16 , 15 ,14 , 13 , 13 , 12 , 11 , 11 , 11 , 12 , 13 , 15 , 16 , 18 , 19 , 20 , 21 , 21 , 21 , 21 , 20 , 19 , 18  },
		  {0, 19 , 18 , 17 ,16 , 14 , 13 , 12 , 11 , 10 , 10 , 10 , 11 , 12 , 14 , 16 , 18 , 19 , 21 , 22 , 23 , 23 , 22 , 22  ,21 },
		  {0, 17 , 16 , 16 , 15 , 15 , 14 , 13 , 13 , 13 , 12 , 12 , 13 , 13 , 14 , 15 , 16 , 16 , 17 , 18 , 18 , 19 , 18 , 18 , 18  },
		  {0, 16 , 16  , 15 , 15 ,14 , 13 , 13 , 12 , 12 , 12 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 18 , 19 , 19 , 19 , 18 , 18 , 18 },
          };
		 // table 9-2 ------------------------
		 Hash<String,String,Integer> R_9_2 = new Hash<String,String,Integer>();
		 R_9_2.put( "16","December",0);
		 R_9_2.put( "16","Jan./Nov",1);
		 R_9_2.put( "16","Feb./Oct",2);
		 R_9_2.put( "16","mar./Sept",3);
		 R_9_2.put( "16","Apr./Aug",4);
		 R_9_2.put( "16","May/July",5);
		 R_9_2.put( "16","June",6);
         //------------------------------
		 R_9_2.put( "24","December",7);
		 R_9_2.put( "24","Jan./Nov",8);
		 R_9_2.put( "24","Feb./Oct",9);
		 R_9_2.put( "24","mar./Sept",10);
		 R_9_2.put( "24","Apr./Aug",11);
		 R_9_2.put( "24","May/July",12);
		 R_9_2.put( "24","June",13);
		 //-----------------------------
		 R_9_2.put( "32","December",14);
		 R_9_2.put( "32","Jan./Nov",15);
		 R_9_2.put( "32","Feb./Oct",16);
		 R_9_2.put( "32","mar./Sept",17);
		 R_9_2.put( "32","Apr./Aug",18);
		 R_9_2.put( "32","May/July",19);
		 R_9_2.put( "32","June",20);
		 //------------------------------
		 R_9_2.put( "40","December",21);
		 R_9_2.put( "40","Jan./Nov",22);
		 R_9_2.put( "40","Feb./Oct",23);
		 R_9_2.put( "40","mar./Sept",24);
		 R_9_2.put( "40","Apr./Aug",25);
		 R_9_2.put( "40","May/July",26);
		 R_9_2.put( "40","June",27);
		 //------------------------------
		 R_9_2.put( "48","December",28);
		 R_9_2.put( "48","Jan./Nov",29);
		 R_9_2.put( "48","Feb./Oct",30);
		 R_9_2.put( "48","mar./Sept",31);
		 R_9_2.put( "48","Apr./Aug",32);
		 R_9_2.put( "48","May/July",33);
		 R_9_2.put( "48","June",34);
		 
		 Map<String,Integer> H_9_2 = new HashMap<String,Integer>();
		 H_9_2.put("N",0); 
		 H_9_2.put("NNE  NNW",1); 
		 H_9_2.put("NE  NW",2); 
		 H_9_2.put("ENE  WNW",3); 
		 H_9_2.put("E  W",4);
		 H_9_2.put("ESE  WSW",5);
		 H_9_2.put("SE  SW",6); 
		 H_9_2.put("SSW  SSW",7); 
		 H_9_2.put("S",8);
		 H_9_2.put("Horizontal Roofs",9); 
		 double Table_9_2[][]= {
				 { -2.2 , -3.3 , -4.4 , -4.4 , -2.2 , -0.5 , 2.2 , 5.0 , 7.2 , -5.0},
				 { -2.2 , -3.3 , -3.8 , -3.8 , -2.2 , -0.5 , 2.2 , 4.4 , 6.6 , -3.8},
				 { -1.6 , -2.7 , -2.7 , -2.2 , -1.1 ,  0.0 , 1.1 , 2.7 , 3.8 , -2.2},
				 { -1.6 , -1.6 , -1.1 , -1.1 , -0.5 , -0.5 , 0.0 , 0.0 , 0.0 , -0.5},
				 { -0.5 ,  0.0 ,  -0.5 , -0.5 , -0.5 , -1.6 ,-1.6 ,-2.7 , 3.3 , 0.0},
				 {  2.2 ,  1.6 ,  1.6 , 0.0 , -0.5 , -2.2 ,-2.7 , -3.8 ,-3.8 , 0.0},
				 {  3.3 , 2.2 , 2.2 , 0.5 , -0.5 , -2.2 , -3.3 , -4,4 , 3.8 , 0.0},
				 //-------------------------------------------------------------
				 { -2.7 , -3.8 , -5.5 , -6.1 , -4.4 , -2.7 , -1.1 , 5.0 , 6.6 , -9.4},
				 { -2.2 , -3.3 , -4.4 , -5.0 , -3.3 , -1.6 , -1.6 , 5.0 , 7.2 , -6.1},
				 { -2.2 , -2.7 , -3.3 , -3.3 , -1.6 ,  -0.5 , 1.6 , 3.8 , 5.5 , -3.8},
				 { -1.6 , -1.2 , -1.6 , -1.6 , -0.5 , -0.5 , 0.5 , 1.1 , 2.2 , -1.6},
				 { -1.1 ,  -0.5 ,  0.0 , -0.5 , -0.5 , -1.1 ,-0.5 ,-1.1 , 1.6 , 0.0},
				 {  0.5 ,  1.1 ,  1.1 , 0.0 , 0.0 , -1.6 ,-1.6 , -2.7 ,-3.3 , 0.5},
				 {  1.6 , 1.6 , 1.6 , 0.5 , 0.0 , -1.6 , -2.2 , -3,3 , 3.3 , 0.5},
				 //-------------------------------------------------------------
				 { -2.7 , -3.8 , -5.5 , -6.1 , -4.4 , -2.7 , -1.1 , 5.0 , 6.6 , -9.4},
				 { -2.2 , -3.8 , -5.0 , -6.1 , -4.4 , -2.2 ,  1.1 , 5.0 , 6.6 , -8.3},
				 { -2.2 , -3.3 , -3.8 , -4.4 , -2.2 ,  -1.1 , 2.2 , 4.4 , 6.1 , -5.5},
				 { -1.6 , -2.2 , -2.2 , -2.2 , -1.1 , -0.5 , 1.6 ,  2.7 , 3.8 , -2.7},
				 { -1.1 , -1.1 , -0.5 , -1.1 ,  0.0 , -0.5 , 0.0  , 5.0 , 0.5 , -0.5},
				 {  0.5 ,  0.5 ,  0.5 ,   0.0 , 0.0 , -0.5 , -0.5 ,-1.6 , -1.6 , 0.5},
				 {  0.5 , 1.1 , 1.1 , 0.5 , 0.0 , -1.1 , -1.1 , -2,2 , -2.2 , 1.1},
				 //-------------------------------------------------------------
				 { -3.3 , -4.4 , -5.5 , -7.2 , -5.5 , -3.8 , 0.0 , 3.8 , 5.5 , -11.6},
				 { -2.7 , -3.8 , -5.5 , -6.6 , -5.0 , -3.3 ,  0.5 , 4.4 , 6.1 , -10.5},
				 { -2.7 , -3.8 , -4.4 , -5.0 , -3.3 ,  -1.6 , 1.6 , 4.4 , 6.6 , -7.7},
				 { -2.2 , -2.7 , -2.7 , -3.3 , -1.6 , 0.5 , 2.2 ,  3.8 , 5.5 , -4.4},
				 { -1.1 , -1.6 , -0.6 , -1.1 , 0.0 , 0.0  , 1.1 , 1.6 , 2.2  , 1.6},
				 {  0.0 ,  0.0 ,  0.0 ,   0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.5 , 0.5},
				 {  0.5 , 0.5 , 0.5 , 0.5 , 0.0 , 0.5 , 0.0 , 0,0 , -0.5 , 1.1},
				 //-------------------------------------------------------------
				 { -3.3 , -4.4 , -6.1 , -7.7 , -7.2 , -5.5 , -1.6 , 1.1 , 3.3 , -13.8},
				 { -3.3 , -4.4 , -6.1 , -7.2 , -6.1 , -4.4 , -0.5 , 2.7 , 4.4 , -13.3},
				 { -2.7 , -3.8 , -5.5 , -6.1 , -4.4 , -2.7 ,  0.5 , 4.4 , 6.1 , -10.0},
				 { -2.2 , -3.3 , -3.3 , -3.8 , -2.2 , -0.5 ,  2.2 , 4.4 , 6.1 , -6.1},
				 { -1.6 , -1.6 , -1.6 , -1.6 , -0.5 , 0.0 , 2.2 ,  3.3 , 3.8 , -2.7},
				 {  0.0 , -0.5 ,  0.0 ,  0.0 , 0.5 , 0.5 , 1.6 , 1.6 , 2.2 , 0.0},
				 {  0.5 , 0.5 , 1.1 , 0.5 , 1.1 , 0.5 , 1.1 , 1,1 , 1.6 , 1.1},
		 };
		 // table 9-4 ------------------------
		 
		 Hash<String,String,Integer> R_9_4 = new Hash<String,String,Integer>();
		 R_9_4.put( "Group A","N",0);
		 R_9_4.put( "Group A","NE",1);
		 R_9_4.put( "Group A","E",2);
		 R_9_4.put( "Group A","SE",3);
		 R_9_4.put( "Group A","S",4);
		 R_9_4.put( "Group A","SW",5);
		 R_9_4.put( "Group A","W",6);
		 R_9_4.put( "Group A","NW",7);
		 //-------------------------
		 R_9_4.put( "Group B","N",8);
		 R_9_4.put( "Group B","NE",9);
		 R_9_4.put( "Group B","E",10);
		 R_9_4.put( "Group B","SE",11);
		 R_9_4.put( "Group B","S",12);
		 R_9_4.put( "Group B","SW",13);
		 R_9_4.put( "Group B","W",14);
		 R_9_4.put( "Group B","NW",15);
		 //----------------------------
		 R_9_4.put( "Group C","N",16);
		 R_9_4.put( "Group C","NE",17);
		 R_9_4.put( "Group C","E",18);
		 R_9_4.put( "Group C","SE",19);
		 R_9_4.put( "Group C","S",20);
		 R_9_4.put( "Group C","SW",21);
		 R_9_4.put( "Group C","W",22);
		 R_9_4.put( "Group C","NW",23);
		 //------------------------
		 R_9_4.put( "Group D","N",16);
		 R_9_4.put( "Group D","NE",17);
		 R_9_4.put( "Group D","E",18);
		 R_9_4.put( "Group D","SE",19);
		 R_9_4.put( "Group D","S",20);
		 R_9_4.put( "Group D","SW",21);
		 R_9_4.put( "Group D","W",22);
		 R_9_4.put( "Group D","NW",23);
		//------------------------
		 R_9_4.put( "Group E","N",16);
		 R_9_4.put( "Group E","NE",17);
		 R_9_4.put( "Group E","E",18);
		 R_9_4.put( "Group E","SE",19);
		 R_9_4.put( "Group E","S",20);
		 R_9_4.put( "Group E","SW",21);
		 R_9_4.put( "Group E","W",22);
		 R_9_4.put( "Group E","NW",23);
		//------------------------
		 R_9_4.put( "Group F","N",16);
		 R_9_4.put( "Group F","NE",17);
		 R_9_4.put( "Group F","E",18);
		 R_9_4.put( "Group F","SE",19);
		 R_9_4.put( "Group F","S",20);
		 R_9_4.put( "Group F","SW",21);
		 R_9_4.put( "Group F","W",22);
		 R_9_4.put( "Group F","NW",23);
		//------------------------
		 R_9_4.put( "Group G","N",16);
		 R_9_4.put( "Group G","NE",17);
		 R_9_4.put( "Group G","E",18);
		 R_9_4.put( "Group G","SE",19);
		 R_9_4.put( "Group G","S",20);
		 R_9_4.put( "Group G","SW",21);
		 R_9_4.put( "Group G","W",22);
		 R_9_4.put( "Group G","NW",23);
		 double Table_9_4[][]= {
				 {0 ,8 ,8 ,8 ,7 ,7 ,7 ,7 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,7 ,7 ,7 ,7 ,8 ,8 },
				 {0 ,11 ,11 ,10 ,10 ,10 ,9 ,9 ,9 ,8 ,8 ,8 ,9 ,9 ,9 ,9 ,10 ,10 ,10 ,11 ,11 ,11 ,11 ,11 ,11 },
				 {0 ,14 ,13 ,13 ,13 ,12 ,12 ,11 ,11 ,10 ,10 ,10 ,11 ,11 ,12 ,12 ,13 ,13 ,13 ,14 ,14 ,14 ,14 ,14 ,14 },
				 {0 ,13 ,13 ,13 ,12 ,12 ,11 ,11 ,10 ,10 ,10 ,10 ,10 ,10 ,11 ,11 ,12 ,12 ,13 ,13 ,13 ,13 ,13 ,13 ,13 },
				 {0 ,11 ,11 ,11 ,11 ,10 ,10 ,9 ,9 ,9 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,9 ,9 ,10 ,10 ,11 ,11 ,11 ,11 },
				 {0 ,14 ,14 ,14 ,14 ,13 ,13 ,12 ,12 ,11 ,11 ,10 ,10 ,10 ,9 ,9 ,10 ,10 ,10 ,11 ,12 ,13 ,13 ,14 ,14 },
				 {0 ,15 ,15 ,15 ,14 ,14 ,14 ,13 ,13 ,12 ,12 ,11 ,11 ,10 ,10 ,10 ,10 ,10 ,11 ,11 ,12 ,13 ,14 ,14 ,15 },
				 {0 ,12 ,12 ,11 ,11 ,11 ,11 ,10 ,10 ,10 ,9 ,9 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,9 ,9 ,10 ,11 ,11 ,11 },
				 //----------
				 {0 ,8 ,8 ,8 ,7 ,7 ,6 ,6 ,6 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,6 ,6 ,7 ,7 ,8 ,8 ,8 ,8 ,8 },
				 {0 ,11 ,10 ,10 ,9 ,9 ,8 ,7 ,7 ,7 ,7 ,8 ,8 ,9 ,9 ,10 ,10 ,11 ,11 ,11 ,12 ,12 ,12 ,11 ,11 },
				 {0 ,13 ,13 ,12 ,11 ,10 ,10 ,9 ,8 ,8 ,9 ,9 ,10 ,12 ,13 ,13 ,14 ,14 ,15 ,15 ,15 ,15 ,15 ,14 ,14 },
				 {0 ,13 ,12 ,12 ,11 ,10 ,10 ,9 ,8 ,8 ,8 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,14 ,14 ,14 ,14 ,14 ,14 ,14 },
				 {0 ,12 ,11 ,11 ,10 ,9 ,9 ,8 ,7 ,7 ,6 ,6 ,6 ,6 ,7 ,8 ,9 ,10 ,11 ,11 ,12 ,12 ,12 ,12 ,12 },
				 {0 ,15 ,15 ,14 ,13 ,13 ,12 ,11 ,10 ,9 ,9 ,8 ,8 ,7 ,7 ,8 ,9 ,10 ,11 ,13 ,14 ,15 ,15 ,16 ,16 },
				 {0 ,16 ,16 ,15 ,14 ,14 ,13 ,12 ,11 ,10 ,9 ,9 ,8 ,8 ,8 ,8 ,8 ,9 ,11 ,12 ,14 ,15 ,16 ,16 ,17 },
				 {0 ,13 ,12 ,12 ,11 ,11 ,10 ,9 ,9 ,8 ,7 ,7 ,7 ,6 ,6 ,7 ,7 ,8 ,8 ,9 ,11 ,12 ,13 ,13 ,13 },
				 //-------------------
				 {0 ,9 ,8 ,7 ,7 ,6 ,5 ,5 ,4 ,4 ,4 ,4 ,4 ,5 ,5 ,6 ,6 ,7 ,8 ,9 ,9 ,9 ,10 ,9 ,9 },
				 {0 ,10 ,10 ,9 ,8 ,7 ,6 ,6 ,6 ,6 ,7 ,8 ,10 ,10 ,11 ,12 ,12 ,12 ,13 ,13 ,13 ,13 ,12 ,12 ,11 },
				 {0 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,7 ,8 ,9 ,11 ,13 ,14 ,15 ,16 ,16 ,17 ,17 ,16 ,16 ,16 ,15 ,14 ,13 },
				 {0 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,6 ,7 ,7 ,9 ,10 ,12 ,14 ,15 ,16 ,16 ,16 ,16 ,16 ,16 ,15 ,14 ,13 },
				 {0 ,12 ,11 ,10 ,9 ,8 ,7 ,6 ,6 ,5 ,5 ,5 ,5 ,6 ,8 ,9 ,11 ,12 ,13 ,14 ,14 ,14 ,14 ,13 ,12 },
				 {0 ,16 ,15 ,14 ,12 ,11 ,10 ,9 ,8 ,7 ,7 ,6 ,6 ,6 ,7 ,8 ,10 ,12 ,14 ,16 ,18 ,18 ,18 ,13 ,17 },
				 {0 ,17 ,16 ,15 ,14 ,12 ,11 ,10 ,9 ,8 ,7 ,7 ,7 ,7 ,7 ,8 ,9 ,11 ,13 ,16 ,18 ,19 ,20 ,19 ,18 },
				 {0 ,14 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,6 ,6 ,5 ,5 ,6 ,6 ,6 ,7 ,9 ,10 ,12 ,14 ,15 ,15 ,15 ,15 },
				 //-----------------------
				 {0 ,8 ,7 ,7 ,6 ,5 ,4 ,3 ,3 ,3 ,3 ,4 ,4 ,5 ,6 ,6 ,7 ,8 ,9 ,10 ,11 ,11 ,10 ,10 ,9 },
				 {0 ,9 ,8 ,7 ,6 ,5 ,5 ,4 ,4 ,6 ,8 ,10 ,11 ,12 ,13 ,13 ,13 ,14 ,14 ,14 ,13 ,13 ,12 ,11 ,10 },
				 {0 ,11 ,10 ,8 ,7 ,6 ,5 ,5 ,5 ,7 ,10 ,13 ,15 ,17 ,18 ,18 ,18 ,18 ,18 ,17 ,17 ,16 ,15 ,13 ,12 },
				 {0 ,11 ,10 ,9 ,7 ,6 ,5 ,5 ,5 ,5 ,7 ,10 ,12 ,14 ,16 ,17 ,18 ,18 ,18 ,17 ,17 ,16 ,15 ,14 ,12 },
				 {0 ,11 ,10 ,9 ,7 ,6 ,5 ,4 ,4 ,3 ,3 ,4 ,5 ,7 ,9 ,11 ,13 ,15 ,16 ,16 ,16 ,15 ,14 ,13 ,12 },
				 {0 ,15 ,14 ,12 ,10 ,9 ,8 ,6 ,5 ,5 ,4 ,4 ,5 ,5 ,7 ,9 ,12 ,15 ,18 ,20 ,21 ,21 ,20 ,19 ,17 },
				 {0 ,17 ,15 ,13 ,12 ,10 ,9 ,7 ,6 ,5 ,5 ,5 ,5 ,6 ,6 ,8 ,10 ,13 ,17 ,20 ,22 ,23 ,22 ,21 ,19 },
				 {0 ,14 ,12 ,11 ,9 ,8 ,7 ,6 ,5 ,4 ,4 ,4 ,4 ,5 ,6 ,7 ,8 ,10 ,12 ,15 ,17 ,18 ,17 ,16 ,15 },
				 //-------------------
				 {0 ,7 ,6 ,5 ,4 ,3 ,2 ,2 ,2 ,3 ,3 ,4 ,5 ,6 ,7 ,8 ,10 ,10 ,11 ,12 ,12 ,11 ,10 ,9 ,8 },
				 {0 ,7 ,6 ,5 ,4 ,3 ,2 ,3 ,5 ,8 ,11 ,13 ,14 ,14 ,14 ,14 ,14 ,15 ,14 ,14 ,13 ,12 ,11 ,9 ,8 },
				 {0 ,8 ,7 ,6 ,5 ,4 ,3 ,3 ,6 ,10 ,15 ,18 ,20 ,21 ,21 ,20 ,19 ,18 ,18 ,17 ,15 ,14 ,12 ,11 ,9 },
				 {0 ,8 ,7 ,6 ,5 ,4 ,3 ,3 ,4 ,7 ,10 ,14 ,17 ,19 ,20 ,20 ,20 ,19 ,18 ,17 ,16 ,14 ,13 ,11 ,10 },
				 {0 ,8 ,7 ,6 ,5 ,4 ,3 ,2 ,2 ,2 ,3 ,5 ,7 ,10 ,14 ,16 ,18 ,19 ,18 ,17 ,16 ,14 ,13 ,11,10 },
				 {0 ,12 ,10 ,8 ,7 ,6 ,4 ,4 ,3 ,3 ,3 ,4 ,5 ,7 ,10 ,14 ,18 ,21 ,24 ,25 ,24 ,22 ,19 ,17 ,14 },
				 {0 ,14 ,12 ,10 ,8 ,6 ,5 ,4 ,3 ,3 ,4 ,4 ,5 ,6 ,8 ,11 ,15 ,20 ,24 ,27 ,27 ,25 ,22 ,19 ,16 },
				 {0 ,11 ,9 ,8 ,6 ,5 ,4 ,3 ,3 ,3 ,3 ,4 ,5 ,6 ,7 ,9 ,11 ,14 ,18 ,21 ,21 ,20 ,18 ,15 ,13 },
				 //-----------------------
				 {0 ,5 ,4 ,3 ,2 ,1 ,1 ,1 ,2 ,3 ,4 ,5 ,6 ,8 ,9 ,11 ,12 ,12 ,13 ,13 ,13 ,11 ,9 ,7 ,6 },
				 {0 ,5 ,4 ,3 ,2 ,2 ,2 ,3 ,8 ,13 ,16 ,17 ,16 ,16 ,15 ,15 ,15 ,15 ,14 ,13 ,12 ,10 ,9 ,7 ,6 },
				 {0 ,5 ,4 ,3 ,2 ,2 ,1 ,4 ,9 ,15 ,21 ,24 ,25 ,23 ,22 ,20 ,19 ,18 ,17 ,15 ,13 ,11 ,10 ,8 ,7 },
				 {0 ,5 ,4 ,3 ,2 ,2 ,1 ,2 ,6 ,10 ,15 ,20 ,23 ,24 ,23 ,22 ,20 ,19 ,17 ,16 ,14 ,12 ,10 ,8 ,7 },
				 {0 ,5 ,4 ,3 ,2 ,2 ,1 ,1 ,1 ,2 ,4 ,7 ,11 ,15 ,19 ,21 ,22 ,21 ,19 ,17 ,15 ,12 ,10 ,8 ,7 },
				 {0 ,8 ,6 ,5 ,4 ,3 ,2 ,1 ,1 ,2 ,3 ,4 ,6 ,10 ,14 ,20 ,24 ,28 ,30 ,29 ,25 ,30 ,16 ,11 ,10 },
				 {0 ,9 ,7 ,5 ,4 ,3 ,2 ,2 ,2 ,2 ,3 ,4 ,6 ,8 ,11 ,16 ,22 ,27 ,32 ,33 ,30 ,24 ,19 ,15 ,12 },
				 {0 ,8 ,6 ,4 ,3 ,2 ,2 ,1 ,1 ,2 ,3 ,4 ,6 ,7 ,9 ,12 ,15 ,19 ,24 ,26 ,24 ,20 ,16 ,12 ,10 },
				 //-------------------------
				 {0 ,2 ,1 ,0 ,0 ,0 ,1 ,4 ,5 ,5 ,7 ,8 ,10 ,12 ,13 ,13 ,14 ,14 ,15 ,12 ,8 ,6 ,5 ,4 ,3 },
				 {0 ,2 ,1 ,1 ,0 ,0 ,5 ,15 ,20 ,22 ,20 ,16 ,15 ,15 ,15 ,15 ,15 ,14 ,12 ,10 ,8 ,6 ,5 ,4 ,3 },
				 {0 ,2 ,1 ,1 ,0 ,0 ,6 ,17 ,26 ,30 ,31 ,28 ,22 ,19 ,17 ,17 ,16 ,15 ,13 ,11 ,8 ,6 ,5 ,4 ,3 },
				 {0 ,2 ,1 ,1 ,0 ,0 ,3 ,10 ,18 ,24 ,27 ,28 ,27 ,23 ,20 ,18 ,16 ,15 ,13 ,11 ,8 ,6 ,5 ,4 ,3, },
				 {0 ,2 ,1 ,1 ,0 ,0 ,0 ,1 ,3 ,7 ,12 ,17 ,22 ,25 ,26 ,24 ,21 ,17 ,14 ,11 ,8 ,6 ,5 ,4 ,3 },
				 {0 ,3 ,2 ,2 ,1 ,0 ,0 ,1 ,3 ,4 ,6 ,9 ,14 ,21 ,28 ,33 ,35 ,34 ,29 ,20 ,13 ,10 ,7 ,6 ,4 },
				 {0 ,4 ,3 ,2 ,1 ,1 ,1 ,1 ,3 ,5 ,6 ,8 ,10 ,15 ,23 ,31 ,37 ,40 ,37 ,21 ,16 ,11 ,8 ,6 ,5 },
				 {0 ,3 ,2 ,1 ,1 ,0 ,0 ,1 ,3 ,4 ,6 ,8 ,10 ,12 ,15 ,20 ,26 ,31 ,31 ,23 ,14 ,10 ,7 ,5 ,4 },
				  
				 
				 };
		 // table 9-7 --------------------------------
//		 ,"Feb.","Mar.","Apr.","Jun.","Jul.","Sep.","Oct.","Nov.","Dec."
		 Map<String,Integer> C_9_7=new  HashMap<String,Integer>(); 
		 C_9_7.put("Jan.",0);
		 C_9_7.put("Feb.",1);
		 C_9_7.put("Mar.",2);
		 C_9_7.put("Apr.",3);
		 C_9_7.put("Maj.",4);
		 C_9_7.put("Jun.",5);
		 C_9_7.put("Jul.",6);
		 C_9_7.put("Aug.",7);
		 C_9_7.put("Sep.",8);
		 C_9_7.put("Oct.",9);
		 C_9_7.put("Nov.",10);
		 C_9_7.put("Dec.",11);
		 double Table_9_7[][]= {
				 {76 ,85 ,101 ,114 ,120 ,139 ,126 ,217 ,104 ,88 ,76 ,69},
				 {76 ,85 ,117 ,252 ,250 ,285 ,250 ,249 ,110 ,88 ,76 ,69},
				 {91 ,205 ,338 ,461 ,536 ,555 ,527 ,445 ,325 ,199 ,91 ,69},
				 {331 ,470 ,577 ,631 ,656 ,656 ,643 ,615 ,546 ,451 ,325 ,265 },
				 {552 ,647 ,716 ,716 ,694 ,675 ,678 ,691 ,678 ,615 ,546 ,551 },
				 {722 ,764 ,748 ,691 ,628 ,596 ,612 ,663 ,716 ,738 ,710 ,688 },
				 {786 ,782 ,716 ,590 ,489 ,439 ,473 ,571 ,688 ,754 ,733 ,776},
				 {789 ,732 ,615 ,445 ,213 ,262 ,303 ,429 ,596 ,710 ,776 ,795 },
				 {776 ,697 ,555 ,363 ,233 ,189 ,227 ,250 ,540 ,678 ,767 ,795},
				 {555 ,685 ,795 ,855 ,874 ,871 ,861 ,836 ,770 ,672 ,552 ,498 },
		 };
		 //table 9-8 ------------------------- 
		 Map<String,Integer> map = new HashMap<String,Integer>();
		  
		 Hash<String,String,Map<String,Integer>> R_9_8 = new Hash<String,String,Map<String,Integer>>();
		 
		 map = new HashMap<String,Integer>();
		 map.put("3",0);
		 map.put("6",1);
		 map.put("10",2);
		 map.put("12",3); 
		 R_9_8.put("Single Glass","Clear",map);
		 map = new HashMap<String,Integer>();
		 map.put("3",4);
		 map.put("6",5);
		 map.put("10",6);
		 map.put("12",7);
		 R_9_8.put("Single Glass","Haet absorbing",map);
		 map = new HashMap<String,Integer>();
		 map.put("3",8);
		 R_9_8.put( "Double Glass","Regular",map);
		 map = new HashMap<String,Integer>();
		 map.put("6",9);
		 R_9_8.put( "Double Glass","palte",map);
		 map = new HashMap<String,Integer>();
		 map.put("6",10);
		 R_9_8.put( "Double Glass","Reflective",map);
		 map = new HashMap<String,Integer>();
		 map.put("3",11);
		 map.put("6",12);
		 R_9_8.put( "Insulating Glass","Clear",map);
		 map = new HashMap<String,Integer>();
		 map.put("6",13);
		 R_9_8.put( "Insulating Glass","Haet absorbing",map);
 
		 Map<String,Integer> H_9_8 = new HashMap<String,Integer>();
		 H_9_8.put("h=22.7",0);
		 H_9_8.put("h=17.0",1);
		 double Table_9_8[][]= {
				 {1.00 ,1.00},
				 {0.94 ,0.95 },
				 {0.90 ,0.92 },
				 {0.87 ,0.88 },
				 {0.83 ,0.85 },
				 {0.68 ,0.73 },
				 {0.60 ,0.64 },
				 {0.53 ,0.58 },
				 {0.90 ,0 },
				 {0.83 ,0 },
				 {0.40 ,0 },
				 {0.88 ,0.88 },
				 {0.81 ,0.82 },
				 {0.55 ,0.58 },
				 };
		 
		 
		 //table 9-9 ----------------------------------------
		 Hash<String,String,Integer> C_9_9 = new Hash<String,String,Integer>();
		 C_9_9.put( "Venetian Blinds","Medium",0);
		 C_9_9.put( "Venetian Blinds","Light",1);
		 C_9_9.put( "Roller Shade","Dark",2);
		 C_9_9.put( "Roller Shade","White",3);
		 C_9_9.put( "Roller Shade","Light",4);
		 double Table_9_9[][]={
			 {0 ,0 ,0 ,0 ,0},
			 {0 ,0 ,0 ,0 ,0},
			 {0.64 ,0.55 ,0.59 ,0.25 ,0.39},
			 {0 ,0 ,0 ,0 ,0},
			 {0 ,0 ,0 ,0 ,0},
			 {0.57 ,0.53 ,0.45 ,0.30 ,0.36},
			 {0 ,0 ,0 ,0 ,0},
			 {0.54 ,0.52 ,0.42 ,0.82 ,0.32},
			 {0.42 ,0.40 ,0.36 ,0.28 ,0.31},
			 {0.30 ,0.25 ,0.23 ,0 ,0},
			 {0.57 ,0.51 ,0.60 ,0.25 ,0},
			 {0.57 ,0.51 ,0.60 ,0.25 ,0}, 
			 {0.20 ,0 ,0 ,0 ,0},
			 {0.57 ,0.51 ,0.60 ,0.25 ,0.37},
			 {0.39 ,0.39 ,0.36 ,0.22 ,0.30}, 
			 {0.20 ,0.19 ,0.18 ,0 ,0},
			 };
		  
		 //table 9-10 ----------------------------------------
		
		 Hash<String,String,Integer> R_9_10 = new Hash<String,String,Integer>();
		 R_9_10.put( "N Shaded","L",0);
		 R_9_10.put( "N Shaded","M",1);
		 R_9_10.put( "N Shaded","H",2);
		 R_9_10.put( "NNE","L",3);
		 R_9_10.put( "NNE","M",4);
		 R_9_10.put( "NNE","H",5);
		 R_9_10.put( "NE","L",6);
		 R_9_10.put( "NE","M",7);
		 R_9_10.put( "NE","H",8);
		 R_9_10.put( "ENE","L",9);
		 R_9_10.put( "ENE","M",10);
		 R_9_10.put( "ENE","H",11);
		 R_9_10.put( "E","L",12);
		 R_9_10.put( "E","M",13);
		 R_9_10.put( "E","H",14);
		 R_9_10.put( "ESE","L",15);
		 R_9_10.put( "ESE","M",16);
		 R_9_10.put( "ESE","H",17);
		 R_9_10.put( "SE","L",18);
		 R_9_10.put( "SE","M",19);
		 R_9_10.put( "SE","H",20);
		 R_9_10.put( "SSW","L",21);
		 R_9_10.put( "SSW","M",22);
		 R_9_10.put( "SSW","H",23);
		 R_9_10.put( "S","L",24);
		 R_9_10.put( "S","M",25);
		 R_9_10.put( "S","H",26);
		 R_9_10.put( "SW","L",27);
		 R_9_10.put( "SW","M",28);
		 R_9_10.put( "SW","H",29);
		 R_9_10.put( "WSW","L",30);
		 R_9_10.put( "WSW","M",31);
		 R_9_10.put( "WSW","H",32);
		 R_9_10.put( "W","L",33);
		 R_9_10.put( "W","M",34);
		 R_9_10.put( "W","H",35);
		 R_9_10.put( "WNW","L",36);
		 R_9_10.put( "WNW","M",37);
		 R_9_10.put( "WNW","H",38);
		 R_9_10.put( "NW","L",39);
		 R_9_10.put( "NW","M",40);
		 R_9_10.put( "NW","H",41);
		 R_9_10.put( "NNW","L",42);
		 R_9_10.put( "NNW","M",43);
		 R_9_10.put( "NNW","H",44);
		 R_9_10.put( "HORIZ.","L",45);
		 R_9_10.put( "HORIZ.","M",46);
		 R_9_10.put( "HORIZ.","H",47);

		
		 
		 double Table_9_10[][]={
				 {0.17 ,0.24 ,0.11 ,0.09 ,0.08 ,0.33 ,0.24 ,0.48 ,0. ,0.56 ,0.61 ,0.71 ,0.76 ,0.82 ,0.82 ,0.79 ,0.75},
				 {0.23 ,0.20 ,0.18 ,0.16 ,0.14 ,0.34 ,0.14 ,0.46 ,0.53 ,0.59 ,0.65 ,0.70 ,0.73 ,0.75 ,0.76 ,0.74 ,0.75},
				 {0.25 ,0.23 ,0.21 ,0.20 ,0.19 ,0.38 ,0.45 ,0.49 ,0.55 ,0.60 ,0.65 ,0.69 ,0.72 ,0.72 ,0.72 ,0.70 ,0.70},
				 //---------
				 {0.06 ,0.05 ,0.04 ,0.03 ,0.03 ,0.26 ,0.43 ,0.47 ,0.44 ,0.41 ,0.40 ,0.39 ,0.39 ,0.38 ,0.36 ,0.33 ,0.30 },
				 {0.09 ,0.08 ,0.07 ,0.06 ,0.06 ,0.24 ,0.38 ,0.42 ,0.39 ,0.37 ,0.37 ,0.36 ,0.36 ,0.36 ,0.34 ,0.33 ,0.30 },
				 {0.11 ,0.10 ,0.09 ,0.09 ,0.08 ,0.26 ,0.39 ,0.42 ,0.39 ,0.36 ,0.35 ,0.34 ,0.34 ,0.33 ,0.32 ,0.31 ,0.28 },
				 //------------------
				 {0.04 ,0.04 ,0.03 ,0.02 ,0.02 ,0.23 ,0.41 ,0.51 ,0.51 ,0.45 ,0.39 ,0.36 ,0.33 ,0.31 ,0.28 ,0.26 ,0.23},
				 {0.07 ,0.06 ,0.06 ,0.05 ,0.04 ,0.21 ,0.36 ,0.44 ,0.45 ,0.40 ,0.36 ,0.33 ,0.31 ,0.30 ,0.28 ,0.26 ,0.24},
				 {0.09 ,0.08 ,0.08 ,0.07 ,0.07 ,0.23 ,0.37 ,0.44 ,0.44 ,0.39 ,0.34 ,0.31 ,0.29 ,0.27 ,0.26 ,0.24 ,0.22},
				 //------------------
				 {0.04 ,0.03 ,0.03 ,0.02 ,0.02 ,0.19 ,0.37 ,0.51 ,0.57 ,0.57 ,0.50 ,0.42 ,0.37 ,0.32 ,0.29 ,0.25 ,0.22},
				 {0.07 ,0.06 ,0.06 ,0.05 ,0.05 ,0.18 ,0.33 ,0.44 ,0.50 ,0.51 ,0.46 ,0.39 ,0.35 ,0.31 ,0.29 ,0.26 ,0.23},
				 {0.09 ,0.09 ,0.08 ,0.08 ,0.07 ,0.20 ,0.34 ,0.45 ,0.49 ,0.49 ,0.43 ,0.39 ,0.32 ,0.29 ,0.26 ,0.24 ,0.22 },
				 //------------------
				 {0.04 ,0.03 ,0.03 ,0.02 ,0.02 ,0.19 ,0.37 ,0.51 ,0.57 ,0.57 ,0.50 ,0.42 ,0.37 ,0.32 ,0.29 ,0.25 ,0.22},
				 {0.07 ,0.06 ,0.06 ,0.05 ,0.05 ,0.18 ,0.33 ,0.44 ,0.50 ,0.51 ,0.46 ,0.39 ,0.35 ,0.31 ,0.29 ,0.26 ,0.23},
				 {0.09 ,0.09 ,0.08 ,0.08 ,0.07 ,0.20 ,0.34 ,0.45 ,0.49 ,0.49 ,0.43 ,0.39 ,0.32 ,0.29 ,0.26 ,0.24 ,0.22},
				 //------------------
				 {0.05 ,0.04 ,0.03 ,0.03 ,0.02 ,0.17 ,0.34 ,0.49 ,0.58 ,0.61 ,0.57 ,0.48 ,0.41 ,0.36 ,0.32 ,0.28 ,0.24 },
				 {0.08 ,0.07 ,0.06 ,0.05 ,0.05 ,0.16 ,0.31 ,0.43 ,0.51 ,0.54 ,0.51 ,0.44 ,0.39 ,0.35 ,0.32 ,0.29 ,0.26},
				 {0.10 ,0.09 ,0.09 ,0.08 ,0.08 ,0.19 ,0.32 ,0.43 ,0.50 ,0.52 ,0.49 ,0.41 ,0.36 ,0.32 ,0.29 ,0.26 ,0.24},
				 //------------------
				 {0.05 ,0.04 ,0.04 ,0.03 ,0.03 ,0.13 ,0.28 ,0.43 ,0.55 ,0.62 ,0.63 ,0.57 ,0.48 ,0.42 ,0.37 ,0.33 ,0.28},
				 {0.09 ,0.08 ,0.07 ,0.06 ,0.05 ,0.14 ,0.26 ,0.38 ,0.48 ,0.54 ,0.56 ,0.51 ,0.45 ,0.40 ,0.36 ,0.33 ,0.29},
				 {0.11 ,0.10 ,0.10 ,0.09 ,0.08 ,0.17 ,0.28 ,0.40 ,0.49 ,0.53 ,0.53 ,0.48 ,0.41 ,0.36 ,0.33 ,0.30 ,0.27},
				 //------------------
				 {0.07 ,0.05 ,0.04 ,0.04 ,0.03 ,0.06 ,0.15 ,0.29 ,0.43 ,0.55 ,0.63 ,0.64 ,0.60 ,0.25 ,0.45 ,0.40 ,0.35},
				 {0.11 ,0.09 ,0.08 ,0.07 ,0.06 ,0.08 ,0.16 ,0.26 ,0.28 ,0.58 ,0.55 ,0.57 ,0.54 ,0.48 ,0.43 ,0.39 ,0.35},
				 {0.12 ,0.11 ,0.11 ,0.10 ,0.09 ,0.12 ,0.19 ,0.29 ,0.40 ,0.49 ,0.54 ,0.55 ,0.51 ,0.44 ,0.39 ,0.35 ,0.31},
				 //------------------
				 {0.08 ,0.07 ,0.05 ,0.04 ,0.04 ,0.06 ,0.09 ,0.14 ,0.22 ,0.34 ,0.48 ,0.59 ,0.65 ,0.65 ,0.59 ,0.50 ,0.43},
				 {0.12 ,0.11 ,0.09 ,0.08 ,0.07 ,0.08 ,0.11 ,0.14 ,0.21 ,0.31 ,0.42 ,0.52 ,0.57 ,0.58 ,0.53 ,0.47 ,0.41},
				 {0.13 ,0.12 ,0.12 ,0.11 ,0.10 ,0.11 ,0.14 ,0.17 ,0.24 ,0.33 ,0.43 ,0.51 ,0.56 ,0.55 ,0.50 ,0.43 ,0.37},
				 //------------------
				 {0.10 ,0.08 ,0.07 ,0.06 ,0.05 ,0.06 ,0.09 ,0.11 ,0.15 ,0.19 ,0.27 ,0.39 ,0.52 ,0.62 ,0.67 ,0.65 ,0.58},
				 {0.14 ,0.12 ,0.11 ,0.09 ,0.08 ,0.09 ,0.11 ,0.13 ,0.15 ,0.18 ,0.25 ,0.35 ,0.46 ,0.55 ,0.59 ,0.59 ,0.53},
				 {0.15 ,0.14 ,0.13 ,0.12 ,0.11 ,0.12 ,0.14 ,0.16 ,0.18 ,0.21 ,0.27 ,0.37 ,0.46 ,0.53 ,0.57 ,0.55 ,0.49},
				 //------------------
				 {0.12 ,0.10 ,0.08 ,0.06 ,0.05 ,0.06 ,0.08 ,0.10 ,0.12 ,0.14 ,0.16 ,0.24 ,0.36 ,0.49 ,0.60 ,0.66 ,0.66},
				 {0.15 ,0.14 ,0.12 ,0.10 ,0.09 ,0.09 ,0.10 ,0.12 ,0.13 ,0.15 ,0.17 ,0.23 ,0.33 ,0.44 ,0.53 ,0.58 ,0.59},
				 {0.15 ,0.14 ,0.13 ,0.12 ,0.11 ,0.12 ,0.13 ,0.14 ,0.16 ,0.17 ,0.19 ,0.25 ,0.34 ,0.44 ,0.52 ,0.56 ,0.56},
				 //------------------
				 {0.12 ,0.10 ,0.08 ,0.07 ,0.05 ,0.06 ,0.07 ,0.09 ,0.10 ,0.12 ,0.13 ,0.17 ,0.26 ,0.40 ,0.52 ,0.62 ,0.66},
				 {0.15 ,0.13 ,0.12 ,0.10 ,0.09 ,0.09 ,0.10 ,0.11 ,0.12 ,0.13 ,0.14 ,0.17 ,0.24 ,0.35 ,0.46 ,0.54 ,0.58},
				 {0.15 ,0.14 ,0.13 ,0.12 ,0.11 ,0.11 ,0.12 ,0.13 ,0.14 ,0.15 ,0.16 ,0.19 ,0.26 ,0.36 ,0.46 ,0.53 ,0.56},
				 //------------------
				 {0.12 ,0.10 ,0.08 ,0.06 ,0.05 ,0.06 ,0.07 ,0.08 ,0.10 ,0.11 ,0.12 ,0.14 ,0.20 ,0.32 ,0.45 ,0.57 ,0.64},
				 {0.15 ,0.13 ,0.11 ,0.10 ,0.09 ,0.09 ,0.09 ,0.10 ,0.11 ,0.12 ,0.13 ,0.14 ,0.19 ,0.29 ,0.40 ,0.40 ,0.54},
				 {0.14 ,0.13 ,0.12 ,0.11 ,0.10 ,0.11 ,0.12 ,0.13 ,0.14 ,0.14 ,0.15 ,0.16 ,0.21 ,0.30 ,0.40 ,0.49 ,0.54 },
				 //------------------
				 {0.12 ,0.10 ,0.08 ,0.06 ,0.05 ,0.06 ,0.07 ,0.09 ,0.10 ,0.12 ,0.13 ,0.15 ,0.17 ,0.26 ,0.40 ,0.53 ,0.63},
				 {0.15 ,0.13 ,0.11 ,0.10 ,0.09 ,0.09 ,0.10 ,0.11 ,0.12 ,0.11 ,0.14 ,0.15 ,0.17 ,0.24 ,0.35 ,0.47 ,0.55},
				 {0.14 ,0.13 ,0.12 ,0.11 ,0.10 ,0.11 ,0.12 ,0.13 ,0.14 ,0.15 ,0.16 ,0.17 ,0.18 ,0.25 ,0.36 ,0.46 ,0.53},
				 //------------------
				 {0.11 ,0.09 ,0.08 ,0.06 ,0.05 ,0.06 ,0.08 ,0.10 ,0.12 ,0.14 ,0.16 ,0.17 ,0.19 ,0.23 ,0.33 ,0.47 ,0.59 },
				 {0.14 ,0.12 ,0.11 ,0.09 ,0.08 ,0.09 ,0.10 ,0.11 ,0.13 ,0.14 ,0.16 ,0.17 ,0.18 ,0.21 ,0.30 ,0.42 ,0.51 },
				 {0.14 ,0.12 ,0.11 ,0.10 ,0.10 ,0.10 ,0.12 ,0.13 ,0.15 ,0.16 ,0.18 ,0.18 ,0.19 ,0.22 ,0.30 ,0.41 ,0.50 },
				 //------------------
				 {0.12 ,0.09 ,0.08 ,0.06 ,0.05 ,0.07 ,0.11 ,0.14 ,0.18 ,0.22 ,0.25 ,0.27 ,0.29 ,0.30 ,0.33 ,0.44 ,0.57},
				 {0.15 ,0.13 ,0.11 ,0.10 ,0.09 ,0.10 ,0.12 ,0.15 ,0.18 ,0.21 ,0.23 ,0.26 ,0.27 ,0.28 ,0.31 ,0.39 ,0.51},
				 {0.14 ,0.13 ,0.12 ,0.11 ,0.10 ,0.12 ,0.15 ,0.17 ,0.20 ,0.23 ,0.25 ,0.26 ,0.28 ,0.28 ,0.31 ,0.38 ,0.49},
				 //------------------
				 {0.11 ,0.09 ,0.07 ,0.06 ,0.05 ,0.07 ,0.14 ,0.24 ,0.16 ,0.48 ,0.58 ,0.66 ,0.72 ,0.74 ,0.73 ,0.67 ,0.59},
				 {0.16 ,0.14 ,0.12 ,0.11 ,0.11 ,0.11 ,0.16 ,0.24 ,0.23 ,0.43 ,0.52 ,0.59 ,0.64 ,0.67 ,0.66 ,0.62 ,0.56},
				 {0.17 ,0.16 ,0.15 ,0.14 ,0.13 ,0.15 ,0.20 ,0.28 ,0.26 ,0.46 ,0.52 ,0.59 ,0.62 ,0.64 ,0.62 ,0.58 ,0.51},
				 
				 };
		 //table 9-12-------------------------------------------
		         double Table_9_12[]= {1 ,0 -1 ,-1 ,-1 ,-1 ,-1 ,0 ,1 ,2 ,4 ,5 ,7 ,7 ,8 ,8 ,7 ,7 ,6, 4 ,3 ,2 ,2 ,1 };
		 //table 9-11 ----------------------------------------
		 
				 Map<String,Integer> R_9_11=new HashMap<String,Integer>();
				 R_9_11.put( "N Shaded",0);
				 R_9_11.put( "NNE",3); 
				 R_9_11.put( "NE",6); 
				 R_9_11.put( "ENE",9); 
				 R_9_11.put( "E",12); 
				 R_9_11.put( "ESE",15); 
				 R_9_11.put( "SE",18); 
				 R_9_11.put( "SSW",21); 
				 R_9_11.put( "S",24); 
				 R_9_11.put( "SW",27); 
				 R_9_11.put( "WSW",30); 
				 R_9_11.put( "W",33); 
				 R_9_11.put( "WNW",36); 
				 R_9_11.put( "NW",39); 
				 R_9_11.put( "NNW",42); 
				 R_9_11.put( "HORIZ.",45); 
				 double Table_9_11[][]={
				 {0.08 ,0.07 ,0.06 ,0.06 ,0.07 ,0.73 ,0.66 ,0.65 ,0.73 ,0.80 ,0.86 ,0.89 ,0.89 ,0.86 ,0.82 ,0.75 ,0.78},
				 {0.03 ,0.03 ,0.02 ,0.02 ,0.03 ,0.64 ,0.77 ,0.62 ,0.42 ,0.37 ,0.37 ,0.37 ,0.36 ,0.35 ,0.32 ,0.28 ,0.23},
				 {0.03 ,0.02 ,0.02 ,0.02 ,0.02 ,0.56 ,0.76 ,0.74 ,0.58 ,0.37 ,0.29 ,0.27 ,0.26 ,0.24 ,0.22 ,0.20 ,0.16},
				 {0.03 ,0.02 ,0.02 ,0.02 ,0.02 ,0.52 ,0.76 ,0.80 ,0.72 ,0.52 ,0.31 ,0.26 ,0.24 ,0.22 ,0.20 ,0.18 ,0.15},
				 {0.03 ,0.02 ,0.02 ,0.02 ,0.02 ,0.47 ,0.72 ,0.80 ,0.76 ,0.62 ,0.41 ,0.27 ,0.24 ,0.22 ,0.20 ,0.17 ,0.14},
				 {0.03 ,0.03 ,0.02 ,0.02 ,0.02 ,0.41 ,0.67 ,0.79 ,0.80 ,072. ,0.54 ,0.34 ,0.27 ,0.24 ,0.21 ,0.19 ,0.15},
				 {0.03 ,0.03 ,0.02 ,0.02 ,0.02 ,0.30 ,0.57 ,0.74 ,0.82 ,0.79 ,0.68 ,0.49 ,0.33 ,0.28 ,0.25 ,0.22 ,0.18},
				 {0.04 ,0.03 ,0.03 ,0.03 ,0.02 ,0.12 ,0.31 ,0.54 ,0.72 ,0.81 ,0.81 ,0.71 ,0.54 ,0.38 ,0.32 ,0.27 ,0.22},
				 {0.04 ,0.04 ,0.03 ,0.03 ,0.03 ,0.09 ,0.16 ,0.23 ,0.38 ,0.58 ,0.75 ,0.83 ,0.80 ,0.68 ,0.50 ,0.35 ,0.27},
				 {0.05 ,0.04 ,0.04 ,0.03 ,0.03 ,0.09 ,0.14 ,0.18 ,0.22 ,0.27 ,0.43 ,0.63 ,0.78 ,0.84 ,0.80 ,0.66 ,0.46},
				 {0.05 ,0.05 ,0.04 ,0.04 ,0.03 ,0.07 ,0.11 ,0.14 ,0.16 ,0.19 ,0.22 ,0.38 ,0.59 ,0.75 ,0.83 ,0.81 ,0.69},
				 {0.05 ,0.05 ,0.04 ,0.04 ,0.03 ,0.07 ,0.10 ,0.12 ,0.14 ,0.16 ,0.17 ,0.23 ,0.44 ,0.64 ,0.78 ,0.84 ,0.78},
				 {0.05 ,0.05 ,0.04 ,0.04 ,0.03 ,0.06 ,0.09 ,0.11 ,0.13 ,0.15 ,0.16 ,0.17 ,0.31 ,0.53 ,0.72 ,0.82 ,0.81},
				 {0.05 ,0.05 ,0.04 ,0.03 ,0.03 ,0.07 ,0.10 ,0.12 ,0.14 ,0.16 ,0.17 ,0.18 ,0.22 ,0.43 ,0.65 ,0.80 ,0.84},
				 {0.05 ,0.04 ,0.04 ,0.03 ,0.03 ,0.07 ,0.11 ,0.14 ,0.17 ,0.19 ,0.20 ,0.21 ,0.22 ,0.30 ,0.52 ,0.73 ,0.82},
				 {0.05 ,0.05 ,0.04 ,0.03 ,0.03 ,0.11 ,0.17 ,0.22 ,0.26 ,0.30 ,0.32 ,0.33 ,0.34 ,0.34 ,0.39 ,0.61 ,0.82},
				 {0.06 ,0.05 ,0.04 ,0.04 ,0.03 ,0.12 ,0.27 ,0.44 ,0.59 ,0.72 ,0.81 ,0.85 ,0.85 ,0.81 ,0.71 ,0.58 ,0.42},
				
                 };
				 // Table_9_16 ----------------------------------
				 double Table_9_16[][]={
						 {0, 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },
						 {0, 0.49 ,0 ,0.49 ,0 ,0.50 ,0 ,0.51 ,0 ,0.53 ,0 ,0.55 ,0 ,0.58 ,0 ,0.62 },
						 {0, 0.58 ,0 ,0.59 ,0 ,0.60 ,0 ,0.61 ,0 ,0.62 ,0 ,0.64 ,0 ,0.66 ,0 ,0.70  },
						 {0, 0.17 ,0 ,0.66 ,0 ,0.67 ,0 ,0.67 ,0 ,0.69 ,0 ,0.70 ,0 ,0.72 ,0 ,0.75 },
						 {0, 0.13 ,0 ,0.71 ,0 ,0.72 ,0 ,0.72 ,0 ,0.74 ,0 ,0.75 ,0 ,0.77 ,0 ,0.79 },
						 {0, 0.10 ,0 ,0.27 ,0 ,0.76 ,0 ,0.76 ,0 ,0.77 ,0 ,0.79 ,0 ,0.80 ,0 ,0.82 },
						 {0, 0.08 ,0 ,0.21 ,0 ,0.79 ,0 ,0.80, 0 ,0.80 ,0 ,0.81 ,0 ,0.83 ,0 ,0.85 },
						 {0, 0.07 ,0 ,0.16 ,0 ,0.34 ,0 ,0.82 ,0 ,0.83 ,0 ,0.84 ,0 ,0.85 ,0 ,0.87 },
						 {0, 0.06 ,0 ,0.14 ,0 ,0.26 ,0 ,0.84 ,0 ,0.85 ,0 ,0.86 ,0 ,0.87 ,0 ,0.88 },
						 {0, 0.05 ,0 ,0.11 ,0 ,0.21 ,0 ,0.38 ,0 ,0.87 ,0 ,0.88 ,0 ,0.89 ,0 ,0.90 },
						 {0, 0.04 ,0 ,0.10 ,0 ,0.18 ,0 ,0.30 ,0 ,0.89 ,0 ,0.89 ,0 ,0.9 ,0 ,0.91 },
						 {0, 0.04 ,0 ,0.08 ,0 ,0.15 ,0 ,0.25 ,0 ,0.42 ,0 ,0.91 ,0 ,0.91 ,0 ,0.92 },
						 {0, 0.03 ,0 ,0.07 ,0 ,0.13 ,0 ,0.21 ,0 ,0.34 ,0 ,0.92 ,0 ,0.92 ,0 ,0.93 },
						 {0, 0.03 ,0 ,0.06 ,0 ,0.11 ,0 ,0.18 ,0 ,0.28 ,0 ,0.45 ,0 ,0.93 ,0 ,0.94 },
						 {0, 0.02 ,0 ,0.06 ,0 ,0.10 ,0 ,0.15 ,0 ,0.23 ,0 ,0.36 ,0 ,0.94 ,0 ,0.95 },
						 {0, 0.02 ,0 ,0.05 ,0 ,0.08 ,0 ,0.13 ,0 ,0.20 ,0 ,0.30 ,0 ,0.47 ,0 ,0.95 },
						 {0, 0.02 ,0 ,0.04 ,0 ,0.07 ,0 ,0.12 ,0 ,0.17 ,0 ,0.25 ,0 ,0.38 ,0 ,0.96 },
						 {0, 0.02 ,0 ,0.04 ,0 ,0.06 ,0 ,0.10 ,0 ,0.15 ,0 ,0.21 ,0 ,0.31 ,0 ,0.49 },
						 {0, 0.01 ,0 ,0.03 ,0 ,0.06 ,0 ,0.09 ,0 ,0.13 ,0 ,0.19 ,0 ,0.26 ,0 ,0.39 },
						 						 
				 };
				// Table_9_14 ----------------------------------
				 Hash<String,String,Integer> C_9_16 = new Hash<String,String,Integer>();
				 C_9_16.put( "fixture x^4 hours of operation","10",0);
				 C_9_16.put( "fixture x^4 hours of operation","16",1);
				 C_9_16.put( "fixture y^4 hours of operation","10",2);
				 C_9_16.put( "fixture y^4 hours of operation","16",3);
				 double Table_9_14[][]={
						 {0.08  ,  0.19  ,  0.01  ,  0.05},
						 {0.62  ,  0.72  ,  0.76  ,  0.79},
						 {0.66  ,  0.75  ,  0.81  ,  0.83},
						 {0.69  ,  0.77  ,  0.84  ,  0.87},
						 {0.73  ,  0.80  ,  0.88  ,  0.89},
						 {0.75  ,  0.82  ,  0.90  ,  0.91},
						 {0.78  ,  0.84  ,  0.92  ,  0.93},
						 {0.80  ,  0.85  ,  0.93  ,  0.94},
						 {0.82  ,  0.87  ,  0.95  ,  0.95},
						 {0.84  ,  0.88  ,  0.96  ,  0.96},
						 {0.85  ,  0.89  ,  0.97  ,  0.97},
						 {0.32  ,  0.90  ,  0.22  ,  0.98},
						 {0.29  ,  0.91  ,  0.18  ,  0.98},
						 {0.26  ,  0.92  ,  0.14  ,  0.98},
						 {0.23  ,  0.93  ,  0.12  ,  0.99},
						 {0.21  ,  0.94  ,  0.09  ,  0.99},
						 {0.18  ,  0.94  ,  0.08  ,  0.99},
						 {0.17  ,  0.40  ,  0.06  ,  0.24},
						 {0.15  ,  0.56  ,  0.05  ,  0.20},
						 
						 };
		 //---------------------------------------------
				 Hash<String,String,Integer> C_9_13 = new Hash<String,String,Integer>();
				  C_9_13.put("without Hood","Sensible" ,0);
				  C_9_13.put("without Hood","Latent" ,1);
				  C_9_13.put("without Hood","Total" ,2);
				  C_9_13.put("with Hood","Sensible" ,3);
				  
				
				 Map<String,Integer> R_9_13=new HashMap<String,Integer>();
				 R_9_13.put("Hair dryers(Blower type)",0);
				 R_9_13.put("Hair dryers(Helmet type)" ,1);
				 R_9_13.put("Coffee brewer (electrical)",2);
				 R_9_13.put("Coffee brewer (gas)",3);
				 R_9_13.put("Water heater",4);
				 R_9_13.put("Coffee urn (electrical)",5);
				 R_9_13.put("Coffee urn (gas)",6);
				 R_9_13.put("Deep fat fryer (electrical)",7);
				 R_9_13.put("Deep fat fryer (gas)",8);
				 R_9_13.put("Toaster",9);
				 R_9_13.put("Domestic gas oven",10);
				 R_9_13.put("Roasting  oven",11);
				 R_9_13.put("Food warmer(gas)",12);
				 R_9_13.put("Egg boiler",13);
				 R_9_13.put("Frying griddle",14);
				 R_9_13.put("Hotplate",15);
				 R_9_13.put("Neon sign, per meter length",16);
				 R_9_13.put("Sterilizer",17);
				 R_9_13.put("Laboratory burner",18);
				 R_9_13.put("Small copy machine",19);
				 R_9_13.put("Large copy machine",20);
				 R_9_13.put("Motors 400-2000W",21);
				 R_9_13.put("Motors 2000-15000W",22);
				 
				 double Table_9_13[][]={
					{675  ,  120 , 795  , 0  },
					{550  ,  100 , 650  , 0  },
					{225  ,  65  , 290  , 95 },
					{490  ,  210 , 700  , 415},
					{1130 ,  330 , 1465 , 0  },
					{1075 ,  350 , 1425 , 440},
					{1460 ,  625 , 2085 , 415},
					{820  ,  1930, 2750 , 730},
					{2080 ,  2080, 4160 , 830},
					{1055 , 705  , 1760 , 440},
					{2430 , 1200 , 3630 , 0 },
					{500  , 320  , 820   , 0},
					{1550 , 400  , 1950  , 400},
			     	{335  ,220   ,555   ,0},
			     	{13600 , 7200 ,20800, 4150},
			     	{1550 ,1060 , 2610 ,780},
			     	{56  , 0  ,  56  , 0},
			     	{190 , 350  , 540 ,0},
			     	{470 ,120 ,590 ,0},
			     	{1760 ,0 ,1760 ,0},
			     	{3515 ,0 ,3515 ,0},
			     	{1100 , 0 ,1100,0},
			     	{2430 , 0 ,2430 , 0}
			     	};
				 //----------------------------------------------------------------
				 double table_A_3a[][]= {
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.27, 0.4, 0.25, 0.18, 0.14, 0.11, 0.09, 0.08, 0.06, 0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.28, 0.41, 0.51,0.59, 0.39, 0.3, 0.24, 0.19, 0.16, 0.14, 0.12, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05, 0.05, 0.04, 0.04, 0.03, 0.03, 0.02, 0.02 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.29, 0.42, 0.52, 0.59, 0.65, 0.7, 0.48, 0.37, 0.3, 0.25, 0.21, 0.18, 0.16, 0.14, 0.12, 0.11, 0.09, 0.08, 0.07, 0.06, 0.05, 0.05, 0.04, 0.04 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.31, 0.44, 0.54, 0.61, 0.66, 0.71, 0.75, 0.78, 0.55, 0.43, 0.35, 0.3, 0.25, 0.22, 0.19, 0.16, 0.14, 0.13, 0.11, 0.1, 0.08, 0.07, 0.06, 0.06 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.33, 0.46, 0.55, 0.62, 0.68, 0.72, 0.76, 0.79, 0.81, 0.84, 0.6, 0.48, 0.39, 0.33, 0.28, 0.24, 0.21, 0.18, 0.16, 0.14, 0.12, 0.11, 0.09, 0.08 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.36, 0.49, 0.58, 0.64, 0.69, 0.74, 0.7, 0.8, 0.82, 0.85, 0.87, 0.88, 0.64, 0.51, 0.42, 0.36, 0.31, 0.26, 0.23, 0.2, 0.18, 0.15, 0.13, 0.12 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.4, 0.52, 0.61, 0.67, 0.72,  0.76, 0.79, 0.82, 0.84, 0.86, 0.88, 0.89, 0.91, 0.92, 0.67, 0.54, 0.45, 0.38, 0.32, 0.28, 0.24, 0.21, 0.19, 0.16 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.45, 0.57, 0.65, 0.7, 0.75, 0.78, 0.81, 0.84, 0.86, 0.87, 0.89, 0.9, 0.92, 0.93, 0.94, 0.94, 0.69, 0.56, 0.46, 0.39, 0.34, 0.29, 0.25, 0.22 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.52, 0.63, 0.7, 0.75, 0.79, 0.82, 0.84, 0.86, 0.88, 0.89, 0.91, 0.92, 0.93, 0.94, 0.95, 0.95, 0.96, 0.96, 0.71, 0.58, 0.48, 0.41, 0.35, 0.3 }, 
						 
				 };
				 //----------------------------------------------------------------
				 double table_A_3b[][]=  {
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.56, 0.64, 0.51, 0.11, 0.08, 0.07, 0.06, 0.05, 0, 0, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.57, 0.65, 0.71,0.75, 0.23, 0.18, 0.18, 0.12, 0.1, 0.1, 0.07, 0.06, 0.05, 0.05, 0.04, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.57, 0.65, 0.71, 0.76, 0.79, 0.82, 0.29, 0.22, 0.2, 0.2, 0.13, 0.11, 0.1, 0.08, 0.07, 0.06, 0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.03, 0.02 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.58, 0.66, 0.72, 0.76, 0.8, 0.82, 0.85, 0.87, 0.3, 0.3, 0.21, 0.18, 0.15, 0.13, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.04, 0.03 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.6, 0.68, 0.73, 0.77, 0.81, 0.83, 0.85, 0.87, 0.9, 0.9, 0.36, 0.29, 0.24, 0.2, 0.17, 0.15, 0.13, 0.11, 0.1, 0.08, 0.07, 0.07, 0.06, 0.05 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.62, 0.69, 0.75, 0.79, 0.82, 0.84, 0.86, 0.88, 0.9, 0.9, 0.92, 0.93, 0.38, 0.31, 0.25, 0.21, 0.18, 0.16, 0.14, 0.12, 0.11, 0.09, 0.08, 0.07 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.64, 0.71, 0.76, 0.8, 0.83, 0.85, 0.87, 0.89, 0.9, 0.9, 0.93, 0.93, 0.94, 0.95, 0.4, 0.32, 0.27, 0.23, 0.19, 0.17, 0.15, 0.13, 0.11, 0.1 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.67, 0.74, 0.79, 0.82, 0.85,  0.87, 0.89, 0.9, 0.9, 0.9, 0.93, 0.94, 0.95, 0.96, 0.96, 0.97, 0.42, 0.34, 0.28, 0.24, 0.2, 0.18, 0.15, 0.13 },
						 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
						 {0,0.71, 0.78, 0.82, 0.85, 0.87, 0.89, 0.9, 0.92, 0.9, 0.9, 0.94, 0.95, 0.96, 0.96, 0.97, 0.97, 0.97, 0.98, 0.43, 0.35, 0.29, 0.24, 0.21, 0.18 }, 
						 
				 };
				 //----------------------------------
				 
				 
				    double Table_10a[][]= {
				    		{0 ,16.3, 18.0, 18.4, 18.5, 18.0 ,19.4, 20.4, 18.6, 17.0, 13.0, 14.1, 16.0},
				    		{0 ,8.7,  9.5, 10.0, 10.2, 10.7, 12.0, 12.4, 11.3, 10.3, 7.7, 7.8, 7.7},
				    		{0 ,7.5,  7.9,7.9, 7.9, 9.0, 9.4 ,9.7, 8.6, 7.2, 5.4, 6.1, 7.5},
				    		{0 ,4.3,  4.1, 3.8, 3.4, 3.3, 2.9, 2.9 ,2.7, 2.6, 2.9, 3.8, 4.0},
				    		{0 ,8.9, 10.4, 13.1, 16.2, 15.8, 15.3 ,16.0, 14.8, 12.6, 9.4, 7.9, 7.6},
				    		{0 ,12.4 ,12.8 ,12.6 ,11.5 ,9.3,9.3 ,9.2 ,8.7 ,8.1 ,8.0 ,8.8 ,10.1},
				    		{0,8.6 , 10.1, 10.8, 9.7, 6.5, 5.1, 5.1, 5.4, 5.1, 5.8, 5.8, 7.9},
				    		{0, 4.6, 6.5, 6.1, 3.6, 3.3, 3.6, 6.8, 6.5, 5.0, 2.5, 2.5, 2.1}
				    		};
				    double Table_8a[][]= {
				    		{0, 69.3, 65.7, 60.3, 49.3, 42.7, 44, 44.6, 49, 50.3, 53.7,61.3, 66},
				    		{0, 69.3, 65.7, 60.3, 49.3, 42.7, 44, 44.6, 49, 50.3, 53.7,61.3, 66},
				    		{0, 69.7, 68  , 68.2, 57.9, 50.4, 56, 55.5, 61.9, 60.8, 56.5, 60.3, 69.3 },
				    		{0, 71.7, 71.7, 68.2, 51.7, 44.5, 50.7, 49.7, 53.7, 56, 54.7, 62.2, 68},
				    		{0, 73.3, 72,7, 69, 60.7, 58.7, 61.5, 62, 65.2, 60.4, 58.5, 63.4, 65.9},
				    		{0, 66, 69, 64, 67, 73, 77, 76, 75, 65, 66, 72, 62},
				    		{0, 69.7, 68, 68.2, 57.9, 50.4, 56, 55.5, 61.9, 60.8, 56.5, 60.3, 69.3  },
				    		};
				    double Table_1234567a[][]= {
				    		{0, 14.4, 13.7, 15.8, 21.8, 26.9, 29.3, 31, 31.5, 29.5, 26, 21.1, 16},
				    		{0, 14.4, 13.7, 15.8, 21.8, 26.9, 29.3, 31, 31.5, 29.5, 26, 21.1, 16},
				    		{0, 10.2, 10.4, 11.7, 17, 20.7, 23.4, 25.5, 26.4, 24.3, 21.3, 17.7, 12.7},
				    		{0, 8.3, 8.2, 9.5, 17.4, 19.9, 21.7, 23.6, 24, 22.3, 20.1, 16, 10.8},
				    		{0, 12.8, 13, 14.4, 19.4, 22.9, 25.3, 27.6, 28.9, 27.1, 24.2, 20.4, 16.1},
				    		{0,  14.2, 14.6, 15.8, 19.9, 21.4, 23.9, 26, 26.8, 25.2, 23.4, 20.2,16.9},
				    		{0, 10.2, 10.4, 11.7, 17, 20.7, 23.4, 25.5, 26.4, 24.3, 21.3, 17.7, 12.7}
				    		};
				    
		JLabel lblNewLabel = new JLabel("Solar time");
		lblNewLabel.setBounds(10, 11, 140, 14);
		frame.getContentPane().add(lblNewLabel);
		
		Solar_time = new JTextField();
		Solar_time.setBounds(10, 36, 140, 20);
		frame.getContentPane().add(Solar_time);
		Solar_time.setColumns(10);
		
		JLabel lblRootDescript = new JLabel("Root Descript");
		lblRootDescript.setBounds(10, 73, 140, 14);
		frame.getContentPane().add(lblRootDescript);
		
		JComboBox without_with = new JComboBox(new String[] {"without suspended","with suspended" });
		without_with.addPopupMenuListener( listener );
		without_with.setPrototypeDisplayValue("ItemWWW");
		without_with.setBounds(10, 132, 140, 22);
		frame.getContentPane().add(without_with);
		       
		
		JComboBox Root_Descript = new JComboBox(new String[] {
				"steel sheet with 25.4mm(or 50.8mm) insulation",
				"25-mm wood with 25.4 mm insulation",
				"50.8 mm H.W concrete 25.4 mm insultion",
				"25.4 mm wood with 50.8 insultion",
				"152.4 mm L.W concrete",
				"63.5 mm wood with 25.4 mm insulation" ,
				"203.4 mm L.W concrete", 
				"101.6 mm H.W concrete with 25.4mm(or 50.8mm) insulation" ,
				"63.5 mm wood with 50.8 insultion" ,
				"Roof terrace system" ,
				"152.4 mm H.W concrete with 25.4mm(or 50.8mm) insulation" ,
				"101.6.5 mm wood with 25.4mm (or 50.8mm)  insultion"
				});
		Root_Descript.addPopupMenuListener( listener );
		Root_Descript.setPrototypeDisplayValue("ItemWWW");
		Root_Descript.setBounds(10, 98, 140, 22);
		frame.getContentPane().add(Root_Descript);
		
		JLabel lblLat = new JLabel("Lat");
		lblLat.setBounds(10, 165, 140, 14);
		frame.getContentPane().add(lblLat);
		
		JComboBox Lat = new JComboBox(new String []{"16","24","32","40","48"});
		Lat.setBounds(10, 181, 140, 22);
		frame.getContentPane().add(Lat);
		
		JLabel lblMonth = new JLabel("month");
		lblMonth.setBounds(10, 214, 140, 14);
		frame.getContentPane().add(lblMonth);
		 
		JComboBox month = new JComboBox(new String []{
		  "December",
		  "Jan./Nov",
		  "Feb./Oct",
		  "mar./Sept",
		  "Apr./Aug",
		  "May/July",
		  "June"		
				
				});
		month.setBounds(10, 236, 140, 22);
		frame.getContentPane().add(month);
		
		JComboBox will_direction = new JComboBox(new String []{
				"N",
				"NNE  NNW",
				"NE  NW",
				"ENE  WNW",
				"E  W",
				"ESE  WSW",
				"SE  SW",
				"SSW  SSW",
				"S",
				"Horizontal Roofs"			
				
				});
		will_direction.setBounds(10, 297, 140, 22);
		frame.getContentPane().add(will_direction);
		
		Aceiling = new JTextField();
		Aceiling.setBounds(10, 361, 140, 20);
		frame.getContentPane().add(Aceiling);
		Aceiling.setColumns(10);
		
		JLabel lblAceiling = new JLabel("Aceiling");
		lblAceiling.setBounds(10, 335, 140, 14);
		frame.getContentPane().add(lblAceiling);
		
		JComboBox color = new JComboBox( new String [] {
				"dark color", "ligth color"
		});
		color.setBounds(10, 412, 140, 22);
		frame.getContentPane().add(color);
		
		
		JLabel lblTiT = new JLabel("Ti  , T0");
		lblTiT.setBounds(10, 445, 140, 14);
		frame.getContentPane().add(lblTiT);
		
		Ti_T0 = new JTextField();
		Ti_T0.setBounds(10, 470, 140, 20);
		frame.getContentPane().add(Ti_T0);
		Ti_T0.setColumns(10);
		
		JLabel aaa = new JLabel("Qcooling_ceiling");
		aaa.setBounds(1161, 11, 140, 14);
		frame.getContentPane().add(aaa);
		
		Qcooling_ceiling = new JTextField();
		Qcooling_ceiling.setEditable(false);
		Qcooling_ceiling.setBounds(1161, 36, 140, 20);
		frame.getContentPane().add(Qcooling_ceiling);
		Qcooling_ceiling.setColumns(10);
		
		JLabel lblNewLabel_1 = new JLabel("Qcooling-wall");
		lblNewLabel_1.setBounds(1161, 73, 140, 14);
		frame.getContentPane().add(lblNewLabel_1);
		
		Qcooling_wall = new JTextField();
		Qcooling_wall.setEditable(false);
		Qcooling_wall.setBounds(1161, 99, 140, 20);
		frame.getContentPane().add(Qcooling_wall);
		Qcooling_wall.setColumns(10);
		
		JComboBox color_wall = new JComboBox(new String[] {"ligth wall color","medaim wall color","dark wall color"});
		color_wall.setBounds(10, 578, 140, 22);
		frame.getContentPane().add(color_wall);
		
		JComboBox North_Latitude_Wall1 = new JComboBox(new String [] {"N","NE","E","SE","S","SW","W","NW"});
		North_Latitude_Wall1.setBounds(220, 35, 140, 22);
		frame.getContentPane().add(North_Latitude_Wall1);
		
		JComboBox Wall_Group = new JComboBox(new String[] {"Group A","Group B","Group C","Group D","Group E","Group F","Group G"});
		Wall_Group.setBounds(220, 238, 140, 22);
		frame.getContentPane().add(Wall_Group);
		
		JLabel lblNorthLatitudeWall = new JLabel("North Latitude Wall Facting 1");
		lblNorthLatitudeWall.setBounds(188, 11, 189, 14);
		frame.getContentPane().add(lblNorthLatitudeWall);
		
		JLabel lblNewLabel_2 = new JLabel("Wall Group");
		lblNewLabel_2.setBounds(220, 221, 140, 14);
		frame.getContentPane().add(lblNewLabel_2);
		
		JLabel lblNewLabel_3 = new JLabel("AGlass 1");
		lblNewLabel_3.setBounds(220, 276, 140, 14);
		frame.getContentPane().add(lblNewLabel_3);
		
		AGlass1 = new JTextField();
		AGlass1.setBounds(220, 291, 140, 20);
		frame.getContentPane().add(AGlass1);
		AGlass1.setColumns(10);
		
		JLabel lblDirectionToObtain = new JLabel("Direction to obtain LM");
		lblDirectionToObtain.setBounds(10, 500, 140, 14);
		frame.getContentPane().add(lblDirectionToObtain);
		
		JLabel lblColor = new JLabel("ceiling color");
		lblColor.setBounds(10, 392, 140, 14);
		frame.getContentPane().add(lblColor);
		
		JLabel lblCeilingDirection = new JLabel("ceiling direction");
		lblCeilingDirection.setBounds(10, 272, 140, 14);
		frame.getContentPane().add(lblCeilingDirection);
		
		JLabel lblWallColor = new JLabel("wall color");
		lblWallColor.setBounds(10, 558, 140, 14);
		frame.getContentPane().add(lblWallColor);
		
		JComboBox North_Latitude_Wall2 = new JComboBox(new String [] {"N","NE","E","SE","S","SW","W","NW"});
		North_Latitude_Wall2.setBounds(220, 94, 140, 22);
		frame.getContentPane().add(North_Latitude_Wall2);
		
		JLabel lblNorthLatitudeWall_1 = new JLabel("North Latitude Wall Facting 2");
		lblNorthLatitudeWall_1.setBounds(188, 70, 189, 14);
		frame.getContentPane().add(lblNorthLatitudeWall_1);
		
		JLabel lblNorthLatitudeWall_2 = new JLabel("North Latitude Wall Facting 3 ");
		lblNorthLatitudeWall_2.setBounds(188, 121, 189, 14);
		frame.getContentPane().add(lblNorthLatitudeWall_2);
		
		JComboBox North_Latitude_Wall3 = new JComboBox(new String [] {"N","NE","E","SE","S","SW","W","NW"});
		North_Latitude_Wall3.setBounds(220, 144, 140, 22);
		frame.getContentPane().add(North_Latitude_Wall3);
		
		JLabel lblNorthLatitudeWall_3 = new JLabel("North Latitude Wall Facting 4");
		lblNorthLatitudeWall_3.setBounds(188, 170, 189, 14);
		frame.getContentPane().add(lblNorthLatitudeWall_3);
		
		JComboBox North_Latitude_Wall4 = new JComboBox(new String [] {"N","NE","E","SE","S","SW","W","NW"});
		North_Latitude_Wall4.setBounds(220, 191, 140, 22);
		frame.getContentPane().add(North_Latitude_Wall4);
		
		JLabel lblGlassDirection_1 = new JLabel("Glass direction 2");
		lblGlassDirection_1.setBounds(219, 497, 140, 14);
		frame.getContentPane().add(lblGlassDirection_1);
		
		JComboBox Glass_direction2 = new JComboBox(new String []{
				"N",
				"NNE  NNW",
				"NE  NW",
				"ENE  WNW",
				"E  W",
				"ESE  WSW",
				"SE  SW",
				"SSW  SSW",
				"S",
				"Horizontal Roofs"			
				
				});
		Glass_direction2.setBounds(219, 524, 140, 22);
		frame.getContentPane().add(Glass_direction2);
		
		JLabel lblGlassDirection_2 = new JLabel("Glass direction 3");
		lblGlassDirection_2.setBounds(219, 554, 140, 14);
		frame.getContentPane().add(lblGlassDirection_2);
		
		JComboBox Glass_direction3 = new JComboBox(new String []{
				"N",
				"NNE  NNW",
				"NE  NW",
				"ENE  WNW",
				"E  W",
				"ESE  WSW",
				"SE  SW",
				"SSW  SSW",
				"S",
				"Horizontal Roofs"			
				
				});
		Glass_direction3.setBounds(219, 581, 140, 22);
		frame.getContentPane().add(Glass_direction3);
		
		JLabel lblGlassDirection_3 = new JLabel("Glass direction 4");
		lblGlassDirection_3.setBounds(226, 612, 140, 14);
		frame.getContentPane().add(lblGlassDirection_3);
		
		JComboBox Glass_direction4 = new JComboBox(new String []{
				"N",
				"NNE  NNW",
				"NE  NW",
				"ENE  WNW",
				"E  W",
				"ESE  WSW",
				"SE  SW",
				"SSW  SSW",
				"S",
				"Horizontal Roofs"			
				
				});
		Glass_direction4.setBounds(219, 633, 140, 22);
		frame.getContentPane().add(Glass_direction4);
		
		JLabel lblGlassFacing_1 = new JLabel("Glass Facing 2");
		lblGlassFacing_1.setBounds(568, 331, 145, 14);
		frame.getContentPane().add(lblGlassFacing_1);
		
		JComboBox Glass_Facing2 = new JComboBox(new String [] {
				"N Shaded","NNE",
				"NE","ENE","E",
				"ESE","SE","SSW","S",
				"SW","WSW","W","WNW","NW","NNW",
				"HORIZ."	
			});
		Glass_Facing2.setBounds(568, 354, 140, 22);
		frame.getContentPane().add(Glass_Facing2);
		
		JLabel lblGlassFacing_2 = new JLabel("Glass Facing 3");
		lblGlassFacing_2.setBounds(567, 381, 145, 14);
		frame.getContentPane().add(lblGlassFacing_2);
		
		JComboBox Glass_Facing3 = new JComboBox(new String [] {
				"N Shaded","NNE",
				"NE","ENE","E",
				"ESE","SE","SSW","S",
				"SW","WSW","W","WNW","NW","NNW",
				"HORIZ."	
			});
		Glass_Facing3.setBounds(567, 404, 140, 22);
		frame.getContentPane().add(Glass_Facing3);
		
		JComboBox Glass_Facing4 = new JComboBox(new String [] {
				"N Shaded","NNE",
				"NE","ENE","E",
				"ESE","SE","SSW","S",
				"SW","WSW","W","WNW","NW","NNW",
				"HORIZ."	
			});
		Glass_Facing4.setBounds(566, 453, 140, 22);
		frame.getContentPane().add(Glass_Facing4);
		
		JLabel lblGlassFacing_3 = new JLabel("Glass Facing 4");
		lblGlassFacing_3.setBounds(566, 430, 145, 14);
		frame.getContentPane().add(lblGlassFacing_3);
		
		JLabel lblAglass = new JLabel("AGlass 2");
		lblAglass.setBounds(220, 322, 140, 14);
		frame.getContentPane().add(lblAglass);
		
		JTextField AGlass2 = new JTextField();
		AGlass2.setColumns(10);
		AGlass2.setBounds(220, 337, 140, 20);
		frame.getContentPane().add(AGlass2);
		
		JLabel lblAglass_1 = new JLabel("AGlass 3");
		lblAglass_1.setBounds(220, 361, 140, 14);
		frame.getContentPane().add(lblAglass_1);
		
		AGlass3 = new JTextField();
		AGlass3.setColumns(10);
		AGlass3.setBounds(220, 376, 140, 20);
		frame.getContentPane().add(AGlass3);
		
		JLabel lblAglass_2 = new JLabel("AGlass 4");
		lblAglass_2.setBounds(220, 401, 140, 14);
		frame.getContentPane().add(lblAglass_2);
		
		AGlass4 = new JTextField();
		AGlass4.setColumns(10);
		AGlass4.setBounds(220, 416, 140, 20);
		frame.getContentPane().add(AGlass4);
		
		JLabel lblAwall = new JLabel("Awall 1");
		lblAwall.setBounds(396, 16, 140, 14);
		frame.getContentPane().add(lblAwall);
		
		Awall1 = new JTextField();
		Awall1.setColumns(10);
		Awall1.setBounds(396, 31, 140, 20);
		frame.getContentPane().add(Awall1);
		
		JLabel lblAwall_1 = new JLabel("Awall 2");
		lblAwall_1.setBounds(395, 62, 140, 14);
		frame.getContentPane().add(lblAwall_1);
		
		Awall2 = new JTextField();
		Awall2.setColumns(10);
		Awall2.setBounds(395, 77, 140, 20);
		frame.getContentPane().add(Awall2);
		
		JLabel lblAwall_2 = new JLabel("Awall 3");
		lblAwall_2.setBounds(396, 111, 140, 14);
		frame.getContentPane().add(lblAwall_2);
		
		Awall3 = new JTextField();
		Awall3.setColumns(10);
		Awall3.setBounds(396, 126, 140, 20);
		frame.getContentPane().add(Awall3);
		
		JLabel lblAwall_3 = new JLabel("Awall 4");
		lblAwall_3.setBounds(395, 158, 140, 14);
		frame.getContentPane().add(lblAwall_3);
		
		Awall4 = new JTextField();
		Awall4.setColumns(10);
		Awall4.setBounds(395, 173, 140, 20);
		frame.getContentPane().add(Awall4);
		
		JLabel lblAwin = new JLabel("Awin 1");
		lblAwin.setBounds(396, 206, 140, 14);
		frame.getContentPane().add(lblAwin);
		
		Awin1 = new JTextField();
		Awin1.setColumns(10);
		Awin1.setBounds(396, 221, 140, 20);
		frame.getContentPane().add(Awin1);
		
		JLabel lblAwin_1 = new JLabel("Awin 2");
		lblAwin_1.setBounds(396, 260, 140, 14);
		frame.getContentPane().add(lblAwin_1);
		
		Awin2 = new JTextField();
		Awin2.setColumns(10);
		Awin2.setBounds(396, 275, 140, 20);
		frame.getContentPane().add(Awin2);
		
		JLabel lblAwin_2 = new JLabel("Awin 3");
		lblAwin_2.setBounds(397, 304, 140, 14);
		frame.getContentPane().add(lblAwin_2);
		
		Awin3 = new JTextField();
		Awin3.setColumns(10);
		Awin3.setBounds(397, 319, 140, 20);
		frame.getContentPane().add(Awin3);
		
		JLabel lblAwin_3 = new JLabel("Awin 4");
		lblAwin_3.setBounds(398, 350, 140, 14);
		frame.getContentPane().add(lblAwin_3);
		
		Awin4 = new JTextField();
		Awin4.setColumns(10);
		Awin4.setBounds(398, 365, 140, 20);
		frame.getContentPane().add(Awin4);
		
		lm = new JTextField();
		lm.setBounds(10, 523, 122, 23);
		frame.getContentPane().add(lm);
		lm.setColumns(10);
		
		
		
		JLabel lblQtransThrongGlass = new JLabel("Q.trans throng glass");
		lblQtransThrongGlass.setBounds(1161, 136, 140, 14);
		frame.getContentPane().add(lblQtransThrongGlass);
		
		Qtrans_throng_glass = new JTextField();
		Qtrans_throng_glass.setEditable(false);
		Qtrans_throng_glass.setBounds(1161, 162, 140, 20);
		frame.getContentPane().add(Qtrans_throng_glass);
		Qtrans_throng_glass.setColumns(10);
		
		JLabel lblGlassDirection = new JLabel("Glass direction 1");
		lblGlassDirection.setBounds(219, 442, 140, 14);
		frame.getContentPane().add(lblGlassDirection);
		
		JComboBox month3 = new JComboBox(new String[] {"Jan.","Feb.","Mar.","Apr.","Maj","Jun.","Jul.","Aug.","Sep.","Oct.","Nov.","Dec."});
		month3.setBounds(398, 403, 140, 22);
		frame.getContentPane().add(month3);
		

		JComboBox  Galss = new JComboBox(new String[] {"Single Glass","Double Glass","Insulating Glass"});
		 Galss.setBounds(398, 503, 140, 22);
		frame.getContentPane().add( Galss);
				
		JComboBox Type_Galss = new JComboBox(new String [] {
				"Clear" ,"Haet absorbing","Regular","palte","Reflective"});
		Type_Galss.setBounds(398, 473, 140, 22);
		frame.getContentPane().add(Type_Galss);
		
		JLabel lblTypeGalss = new JLabel("Type Galss");
		lblTypeGalss.setBounds(398, 459, 140, 14);
		frame.getContentPane().add(lblTypeGalss);
		
		JComboBox Glass_with = new JComboBox(new String [] {"Glass with no Shading","Glass with Shading"});
		Glass_with.addPopupMenuListener( listener );
		Glass_with.setBounds(398, 434, 140, 22);
		frame.getContentPane().add(Glass_with);
		
		JLabel lblNormailThickness = new JLabel("Normail Thickness");
		lblNormailThickness.setBounds(400, 532, 140, 14);
		frame.getContentPane().add(lblNormailThickness);
		
		JComboBox Normail_Thickness = new JComboBox(new String [] {"3","6","10","12"});
		Normail_Thickness.setBounds(400, 561, 140, 22);
		frame.getContentPane().add(Normail_Thickness);
		
		JComboBox Shading_Conefficient = new JComboBox(new String [] {"h=22.7","h=17.0"});
		Shading_Conefficient.setBounds(403, 618, 140, 22);
		frame.getContentPane().add(Shading_Conefficient);
		
		JLabel lblShadingConefficient = new JLabel("Shading Conefficient");
		lblShadingConefficient.setBounds(403, 593, 140, 14);
		frame.getContentPane().add(lblShadingConefficient);
		
		JLabel lblTypeGlass = new JLabel("Type Glass");
		lblTypeGlass.setBounds(566, 14, 140, 14);
		frame.getContentPane().add(lblTypeGlass);
		
		JComboBox Type_Glass2 = new JComboBox(new String[] {
				"Clear, regular",
				"Claar, plate",
				"Clear pattern",
				"Heat Abosrbing",
				"Pattern or Tinted(gray sheet)",
				"Heat Abosrbing plate",
				"Pattern or Tinted, gray sheet",
				"Heat Abosrbing plate or Pattern Heat Abosrbing",
				"Heat Abosrbing or Pattern",
				"Reflective Coated Glass",
				"Regular",
				"Plate",
				"Reflective",
				"Clear",
				"Heat Abosrbing",
                "Reflective Coated"
				
				});
		Type_Glass2.setBounds(566, 36, 140, 22);
		Type_Glass2.addPopupMenuListener( listener );
		frame.getContentPane().add(Type_Glass2);
		
		Normail_Thickness2 = new JTextField();
		Normail_Thickness2.setBounds(566, 96, 140, 20);
		frame.getContentPane().add(Normail_Thickness2);
		Normail_Thickness2.setColumns(10);
		
		JLabel label = new JLabel("Normail Thickness");
		label.setBounds(566, 70, 140, 14);
		frame.getContentPane().add(label);
		
		JLabel lblNewLabel_4 = new JLabel("type of Shading");
		lblNewLabel_4.setBounds(566, 137, 140, 14);
		frame.getContentPane().add(lblNewLabel_4);
		
		JComboBox type_shading = new JComboBox(new String[] {"Venetian Blinds","Roller Shade"});
		type_shading.setBounds(566, 162, 140, 22);
		frame.getContentPane().add(type_shading);
		
		JComboBox MLDW = new JComboBox(new String[] {"Medium","Light","Dark","White"});
		MLDW.setBounds(566, 211, 140, 22);
		frame.getContentPane().add(MLDW);
		
		JComboBox with_no = new JComboBox(new String[] {"with","withno"});
		with_no.setBounds(566, 253, 140, 22);
		frame.getContentPane().add(with_no);
		

		JComboBox Glass_Facing1 = new JComboBox(new String [] {
			"N Shaded","NNE",
			"NE","ENE","E",
			"ESE","SE","SSW","S",
			"SW","WSW","W","WNW","NW","NNW",
			"HORIZ."	
		});
		Glass_Facing1.setBounds(566, 308, 140, 22);
		frame.getContentPane().add(Glass_Facing1);
		
		JLabel lblNewLabel_5 = new JLabel("Building Construction");
		lblNewLabel_5.setBounds(571, 479, 140, 14);
		frame.getContentPane().add(lblNewLabel_5);
		
		JComboBox Building_Construction = new JComboBox(new String[] {"L","M","H"});
		Building_Construction.setBounds(571, 504, 140, 22);
		frame.getContentPane().add(Building_Construction);
		
		JLabel lblGlassFacing = new JLabel("Glass Facing 1");
		lblGlassFacing.setBounds(566, 283, 145, 14);
		frame.getContentPane().add(lblGlassFacing);
		
		JLabel lblNewLabel_6 = new JLabel("Fenestration Facing");
		lblNewLabel_6.setBounds(572, 532, 140, 14);
		frame.getContentPane().add(lblNewLabel_6);
		
		JComboBox Fenestration_Facing = new JComboBox(new String [] {
				"N Shaded","NNE",
				"NE","ENE","E",
				"ESE","SE","SSW","S",
				"SW","WSW","W","WNW","NW","NNW",
				"HORIZ."	
			});
		Fenestration_Facing.setBounds(571, 554, 140, 22);
		frame.getContentPane().add(Fenestration_Facing);
		

		JLabel lblQconvhgain = new JLabel("Qconv.H.Gain");
		lblQconvhgain.setBounds(1161, 199, 140, 14);
		frame.getContentPane().add(lblQconvhgain);
		
		Qconv_H_Gain = new JTextField();
		Qconv_H_Gain.setEditable(false);
		Qconv_H_Gain.setBounds(1161, 224, 140, 20);
		frame.getContentPane().add(Qconv_H_Gain);
		Qconv_H_Gain.setColumns(10);
		
		JLabel lblNewLabel_7 = new JLabel("Hours After Each Into Space");
		lblNewLabel_7.setBounds(735, 13, 140, 14);
		frame.getContentPane().add(lblNewLabel_7);
		
		Hours_after_each_into_space = new JTextField();
		Hours_after_each_into_space.setBounds(735, 38, 140, 20);
		frame.getContentPane().add(Hours_after_each_into_space);
		Hours_after_each_into_space.setColumns(10);
		
		JLabel lblNewLabel_8 = new JLabel("Total Hours space");
		lblNewLabel_8.setBounds(735, 75, 140, 14);
		frame.getContentPane().add(lblNewLabel_8);
		
		Total_Hours_space = new JTextField();
		Total_Hours_space.setBounds(735, 101, 140, 20);
		frame.getContentPane().add(Total_Hours_space);
		Total_Hours_space.setColumns(10);
		
		JLabel lblQlpeoplecooling = new JLabel("QL.people(cooling)");
		lblQlpeoplecooling.setBounds(1161, 252, 140, 14);
		frame.getContentPane().add(lblQlpeoplecooling);
		
		QL_people_cooling = new JTextField();
		QL_people_cooling.setEditable(false);
		QL_people_cooling.setColumns(10);
		QL_people_cooling.setBounds(1161, 277, 140, 20);
		frame.getContentPane().add(QL_people_cooling);
		
		JLabel lblQspeoplecooling = new JLabel("QS.people(cooling)");
		lblQspeoplecooling.setBounds(1161, 308, 140, 14);
		frame.getContentPane().add(lblQspeoplecooling);
		
		QS_people_cooling = new JTextField();
		QS_people_cooling.setEditable(false);
		QS_people_cooling.setColumns(10);
		QS_people_cooling.setBounds(1161, 333, 140, 20);
		frame.getContentPane().add(QS_people_cooling);
		
		JLabel lblQlighting = new JLabel("Qlighting");
		lblQlighting.setBounds(1161, 364, 140, 14);
		frame.getContentPane().add(lblQlighting);
		
		Qlighting = new JTextField();
		Qlighting.setEditable(false);
		Qlighting.setColumns(10);
		Qlighting.setBounds(1161, 389, 140, 20);
		frame.getContentPane().add(Qlighting);
		
		JComboBox x_y = new JComboBox(new String[] {"fixture x^4 hours of operation","fixture y^4 hours of operation"});
		x_y.addPopupMenuListener( listener );
		x_y.setBounds(735, 134, 140, 22);
		frame.getContentPane().add(x_y);
		
		W_Lihting_Capacity = new JTextField();
		W_Lihting_Capacity.setColumns(10);
		W_Lihting_Capacity.setBounds(735, 316, 140, 20);
		frame.getContentPane().add(W_Lihting_Capacity);
		
		JLabel lblWLihtingCapacity = new JLabel("W Lighting Capacity");
		lblWLihtingCapacity.setBounds(735, 290, 140, 14);
		frame.getContentPane().add(lblWLihtingCapacity);
		
		JLabel lblNewLabel_9 = new JLabel("number of hoursr after lights are turned on");
		lblNewLabel_9.setBounds(735, 227, 239, 14);
		frame.getContentPane().add(lblNewLabel_9);
		
		number_of_hoursr_after_lights = new JTextField();
		number_of_hoursr_after_lights.setBounds(735, 258, 140, 20);
		frame.getContentPane().add(number_of_hoursr_after_lights);
		number_of_hoursr_after_lights.setColumns(10);
		
		
		JComboBox _10_16 = new JComboBox(new String[] {"10","16"});
		_10_16.setBounds(735, 163, 140, 22);
		frame.getContentPane().add(_10_16);
		
		QL_quipment = new JTextField();
		QL_quipment.setEditable(false);
		QL_quipment.setColumns(10);
		QL_quipment.setBounds(1161, 497, 140, 20);
		frame.getContentPane().add(QL_quipment);
		
		JLabel lblOutput_1 = new JLabel("QL.Equipment");
		lblOutput_1.setBounds(1161, 472, 140, 14);
		frame.getContentPane().add(lblOutput_1);
		
		QS_Equipment = new JTextField();
		QS_Equipment.setEditable(false);
		QS_Equipment.setColumns(10);
		QS_Equipment.setBounds(1161, 441, 140, 20);
		frame.getContentPane().add(QS_Equipment);
		
		JLabel lblOutput = new JLabel("QS.Equipment");
		lblOutput.setBounds(1161, 416, 140, 14);
		frame.getContentPane().add(lblOutput);
		
		JComboBox Application_of_Equipment = new JComboBox(new String[] {
				 "Hair dryers(Blower type)",
				 "Hair dryers(Helmet type)" ,
				 "Coffee brewer (electrical)",
				 "Coffee brewer (gas)",
				 "Water heater",
				 "Coffee urn (electrical)",
				 "Coffee urn (gas)",
				 "Deep fat fryer (electrical)",
				 "Deep fat fryer (gas)",
				 "Toaster",
				 "Domestic gas oven",
				 "Roasting  oven",
				 "Food warmer(gas)",
				 "Egg boiler",
				 "Frying griddle",
				 "Hotplate",
				 "Neon sign, per meter length",
				 "Sterilizer",
				 "Laboratory burner",
				 "Small copy machine",
				 "Large copy machine",
				 "Motors 400-2000W",
				 "Motors 2000-15000W",
		} );
		Application_of_Equipment.addPopupMenuListener( listener );
		Application_of_Equipment.setBounds(735, 366, 140, 22);
		frame.getContentPane().add(Application_of_Equipment);
		
		JLabel lblApplication = new JLabel("Application of Equipment");
		lblApplication.setBounds(735, 341, 140, 14);
		frame.getContentPane().add(lblApplication);
		
		JComboBox Hood = new JComboBox(new String[]{"with Hood" ,"without Hood"});
		Hood.setBounds(735, 402, 140, 22);
		frame.getContentPane().add(Hood);
		

		JComboBox Glass_direction1 = new JComboBox(new String []{
				"N",
				"NNE  NNW",
				"NE  NW",
				"ENE  WNW",
				"E  W",
				"ESE  WSW",
				"SE  SW",
				"SSW  SSW",
				"S",
				"Horizontal Roofs"			
				
				});
		Glass_direction1.setBounds(219, 469, 140, 22);
		frame.getContentPane().add(Glass_direction1);
		
		JComboBox hooded_un = new JComboBox(new String[]{
				"hooded","unhooded"
		});
		hooded_un.setBounds(570, 587, 140, 22);
		frame.getContentPane().add(hooded_un);

		run_hour = new JTextField();
		run_hour.setBounds(735, 475, 140, 20);
		frame.getContentPane().add(run_hour);
		run_hour.setColumns(10);
		
		number_of_hour = new JTextField();
		number_of_hour.setBounds(735, 540, 140, 20);
		frame.getContentPane().add(number_of_hour);
		number_of_hour.setColumns(10);
		
		JLabel lblRunHour = new JLabel("run hour");
		lblRunHour.setBounds(735, 446, 140, 14);
		frame.getContentPane().add(lblRunHour);
		
		JLabel lblNumberofhour = new JLabel("number_of_hour");
		lblNumberofhour.setBounds(735, 514, 140, 14);
		frame.getContentPane().add(lblNumberofhour);
		
		JComboBox SNW = new JComboBox(new String []{
				"N",
				"NNE  NNW",
				"NE  NW",
				"ENE  WNW",
				"E  W",
				"ESE  WSW",
				"SE  SW",
				"SSW  SSW",
				"S",
				"Horizontal Roofs"			
				
				});
		SNW.setBounds(131, 524, 19, 22);
		SNW.addPopupMenuListener( listener );
		frame.getContentPane().add(SNW);
		SNW.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	
            	lm.setText( SNW.getSelectedItem()+"," +lm.getText() );
          		 
          	 
          }
      });
			JLabel label_1 = new JLabel("month");
			label_1.setBounds(984, 11, 48, 14);
			frame.getContentPane().add(label_1);
			
			JComboBox month2 = new JComboBox(new String []{"","1","2","3","4","5","6","7","8","9","10","11","12"});
			month2.setBounds(984, 35, 167, 22);
			frame.getContentPane().add(month2);
		  Map<String, Integer> Month2 = new Hashtable<>();  
		  Month2.put("1", 1);
		  Month2.put("2", 2);
		  Month2.put("3",3); 
		  Month2.put("4",4); 
		  Month2.put("5",5); 
		  Month2.put("6",6); 
		  Month2.put("7",7);
		  Month2.put("8", 8);
		  Month2.put("9", 9);
		  Month2.put("10", 10);
		  Month2.put("11", 11);
		  Month2.put("12", 12);
		  
		 month2.addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	 double w0,speeD,TT0;
	            	 
	            	 int r,r2;
	                 int Month;
 
	             r=Month2.get(month2.getSelectedItem());
 	             
//	               w0=Table_10a[Region][r];
                 TT0=Table_1234567a[Region][r];
//	               
//	            	wi_w0.setText(","+String.valueOf(w0)); 
	            	Ti_T0.setText( String.valueOf(TT0));
			 
	           
	            }
	        });	
		
		JButton btnNewButton = new JButton("Calculation");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//1 -----------------------------------------------------
				 
				Qcooling_ceiling.setText("");
				Qcooling_wall.setText("");
				Qtrans_throng_glass.setText("");
				Qconv_H_Gain.setText(""); 
			    QL_people_cooling.setText("" );
				QS_people_cooling.setText("");
				Qlighting.setText("");
				QL_quipment.setText("");

				
				double   aceiling=0 , C_Tb_cor_c=0 ,  C_Tb=0  , LM=0  , k=0  ,Ti=0 ,T0=0;
				double qcooling_ceiling=0;
				int No_C,No_R,solar_time=0;

				 
				 No_R= R_9_1.get(String.valueOf( without_with.getSelectedItem()),String.valueOf( Root_Descript.getSelectedItem()));
				C_Tb=Table_9_1[No_R][Integer.valueOf(Solar_time.getText())];
				
				 No_R= R_9_2.get(String.valueOf( Lat.getSelectedItem()),String.valueOf( month.getSelectedItem()));
			    LM=Table_9_2[No_R][H_9_2.get(SNW.getSelectedItem())];
			  
			    aceiling=Double.valueOf( Aceiling.getText());
			    if (color.getSelectedItem().equals("dark color"))
			    	k=1;
			    else
			    	k=0.5;
			    
			   
			    String  DT[]=Ti_T0.getText().split("[, ]+");
			    Ti=Double.valueOf(DT[0]);
			    T0=Double.valueOf(DT[1]);
			    
			    C_Tb_cor_c= (C_Tb+LM)*k+(25.5 - Ti) + (T0-29.4);
				qcooling_ceiling=Uceiling*aceiling*C_Tb_cor_c;
				Qcooling_ceiling.setText(String.valueOf(qcooling_ceiling)  );
				//2 -----------------------------------------------------
				double Qwall_1=0,Qwall_2=0,Qwall_3=0,Qwall_4=0 , Awall_1,Awall_2,Awall_3,Awall_4;
				   double qcooling_wall=0 , Uwan=0 , Awan=0 , C_Tb_cor_W1=0 ,C_Tb_cor_W2=0 ,C_Tb_cor_W3=0 ,C_Tb_cor_W4=0 , C_Tb_W3=0,C_Tb_W4=0 , C_Tb_W2=0,C_Tb_W1=0  
						   , LM1=0,LM2=0,LM3=0,LM4=0,   k2=0  ;
				   int NOR_table9_4=0;
				   if (color_wall.getSelectedItem().equals("ligth wall color")  ) k2=0.65;
				   else if (color_wall.getSelectedItem().equals("medaim wall color")) k2=0.83; 
				   else if (color_wall.getSelectedItem().equals("dark wall color")) k2=1;
				   Awall_1=Double.valueOf(Awall1.getText());
				   Awall_2=Double.valueOf(Awall2.getText());
				   Awall_3=Double.valueOf(Awall3.getText());
				   Awall_4=Double.valueOf(Awall4.getText());
				   String llm[]=lm.getText().split(",");
				 //Qwall 1---------------------------------   
				NOR_table9_4=R_9_4.get(String.valueOf(Wall_Group.getSelectedItem()),String.valueOf( North_Latitude_Wall1.getSelectedItem()));
				C_Tb_W1=Table_9_4[NOR_table9_4][Integer.valueOf(Solar_time.getText())];
				No_R= R_9_2.get(String.valueOf( Lat.getSelectedItem()),String.valueOf( month.getSelectedItem()));
			    LM1=Table_9_2[No_R][H_9_2.get(llm[0])];
			    C_Tb_cor_W1=(C_Tb_W1+LM1)*k2+(25.5 - Ti) + (T0-29.4);
				Qwall_1=Uwall*Awall_1*C_Tb_cor_W1;
				
				//Qwall 2---------------------------------
				NOR_table9_4=R_9_4.get(String.valueOf(Wall_Group.getSelectedItem()),String.valueOf( North_Latitude_Wall2.getSelectedItem()));
				C_Tb_W2=Table_9_4[NOR_table9_4][Integer.valueOf(Solar_time.getText())];
				 
			    LM2=Table_9_2[No_R][H_9_2.get(llm[1])];
			    C_Tb_cor_W2=(C_Tb_W2+LM2)*k2+(25.5 - Ti) + (T0-29.4);
				Qwall_2=Uwall*Awall_2*C_Tb_cor_W2;
				//Qwall 3---------------------------------
				NOR_table9_4=R_9_4.get(String.valueOf(Wall_Group.getSelectedItem()),String.valueOf( North_Latitude_Wall3.getSelectedItem()));
				C_Tb_W3=Table_9_4[NOR_table9_4][Integer.valueOf(Solar_time.getText())];
 			    LM3=Table_9_2[No_R][H_9_2.get(llm[2])];
			    C_Tb_cor_W3=(C_Tb_W3+LM3)*k2+(25.5 - Ti) + (T0-29.4);
				Qwall_3=Uwall*Awall_3*C_Tb_cor_W3;
				//Qwall 4---------------------------------
				NOR_table9_4=R_9_4.get(String.valueOf(Wall_Group.getSelectedItem()),String.valueOf( North_Latitude_Wall4.getSelectedItem()));
				C_Tb_W2=Table_9_4[NOR_table9_4][Integer.valueOf(Solar_time.getText())];
 			    LM2=Table_9_2[No_R][H_9_2.get(llm[3])];
			    C_Tb_cor_W4=(C_Tb_W4+LM4)*k2+(25.5 - Ti) + (T0-29.4);
				Qwall_4=Uwall*Awall_4*C_Tb_cor_W4;
				
				qcooling_wall=Qwall_1+Qwall_2+Qwall_3+Qwall_4;
				Qcooling_wall.setText(String.valueOf(qcooling_wall)  );
				
				//3 -----------------------------------------------------
				double qtrans_throng_glass=0   , SHG1=0, SHG2=0, SHG3=0, SHG4=0 , SC=0 ,  CLF1=0,CLF2=0,CLF3=0,CLF4=0 ,Normail ,Qglass1=0,Qglass2=0,Qglass3=0,Qglass4=0;
				int No_R1,No_R2,No_R3,No_R4;
				Normail=Double.valueOf( Normail_Thickness2.getText());
			 
				No_C=C_9_7.get( month3.getSelectedItem());
				No_R1=H_9_2.get( Glass_direction1.getSelectedItem());
				No_R2=H_9_2.get( Glass_direction2.getSelectedItem());
				No_R3=H_9_2.get( Glass_direction3.getSelectedItem());
				No_R4=H_9_2.get( Glass_direction4.getSelectedItem());
				SHG1=Table_9_7[No_R1][No_C ];
				SHG2=Table_9_7[No_R2][No_C ];
				SHG3=Table_9_7[No_R3][No_C ];
				SHG4=Table_9_7[No_R4][No_C ];
				 
                if (Glass_with.getSelectedItem().equals("Glass with no Shading" )) {
                	No_C=H_9_8.get( Shading_Conefficient.getSelectedItem());
                	No_R=R_9_8.get(String.valueOf( Galss.getSelectedItem() ),String.valueOf( Type_Galss.getSelectedItem())).get(Normail_Thickness.getSelectedItem());
                	SC=Table_9_8[No_R][No_C];
                }else {
                  
            		   				 
                	if(Type_Glass2.getSelectedItem().equals("Clear, regular") && Galss.getSelectedItem().equals("Single Glass")&& 2.5<=Normail && 6.0>Normail ) No_R=0;
                	else if(Type_Glass2.getSelectedItem().equals("Claar, plate") && Galss.getSelectedItem().equals("Single Glass")&& 6.0<=Normail && 12.0>Normail)No_R=1;
                	else if(Type_Glass2.getSelectedItem().equals("Heat Abosrbing") && Galss.getSelectedItem().equals("Single Glass")&& 3.0==Normail)No_R=3;
                	else if(Type_Glass2.getSelectedItem().equals("Pattern or Tinted(gray sheet)")&& Galss.getSelectedItem().equals("Single Glass")&& 5.0<=Normail && 5.5>Normail)No_R=4;
                	else if(Type_Glass2.getSelectedItem().equals("Heat Abosrbing plate")&& Galss.getSelectedItem().equals("Single Glass")&& 5.0<=Normail && 6.0>Normail)No_R=5;
                	else if(Type_Glass2.getSelectedItem().equals("Pattern or Tinted, gray sheet")&& Galss.getSelectedItem().equals("Single Glass")&& 3.0<Normail && 5.5>Normail)No_R=6;
                	else if(Type_Glass2.getSelectedItem().equals("Heat Abosrbing plate or Pattern Heat Abosrbing")&& Galss.getSelectedItem().equals("Single Glass")&& 10==Normail)No_R=7;
                	else if(Type_Glass2.getSelectedItem().equals("Heat Abosrbing or Pattern")&& Galss.getSelectedItem().equals("Single Glass"))No_R=8;
                	else if(Type_Glass2.getSelectedItem().equals("Reflective Coated Glass") && Galss.getSelectedItem().equals("Single Glass"))No_R=9;
                	else if(Type_Glass2.getSelectedItem().equals("Regular") && Galss.getSelectedItem().equals("Double Glass")&& 3==Normail)No_R=10;
                	else if(Type_Glass2.getSelectedItem().equals("Plate") && Galss.getSelectedItem().equals("Double Glass")&& 6==Normail)No_R=11;
                    else if(Type_Glass2.getSelectedItem().equals("Reflective")&& Galss.getSelectedItem().equals("Double Glass")&& 6==Normail)No_R=12;
                    else if(Type_Glass2.getSelectedItem().equals("Clear") && Galss.getSelectedItem().equals("Insulating Glass")&& 2.5<=Normail&& 6.0>Normail)No_R=13;
                    else if(Type_Glass2.getSelectedItem().equals("Heat Abosrbing") && Galss.getSelectedItem().equals("Insulating Glass")&& 5.0<=Normail&& 6.0>Normail)No_R=14;
                    else if(Type_Glass2.getSelectedItem().equals("Reflective Coated") && Galss.getSelectedItem().equals("Insulating Glass"))No_R=15;
                		
                	No_C= C_9_9.get(String.valueOf( type_shading.getSelectedItem()), String.valueOf(MLDW.getSelectedItem()));
                	SC=Table_9_9[No_R][No_C];
                	 
                	}
                
                if(with_no.getSelectedItem().equals("with")) {
                	No_R=R_9_10.get(String.valueOf(Glass_Facing1.getSelectedItem()), String.valueOf(Building_Construction.getSelectedItem()));
                	CLF1=Table_9_10[No_R][Integer.valueOf(Solar_time.getText())] ;
                	No_R=R_9_10.get(String.valueOf(Glass_Facing2.getSelectedItem()), String.valueOf(Building_Construction.getSelectedItem()));
                	CLF2=Table_9_10[No_R][Integer.valueOf(Solar_time.getText())] ;
                	No_R=R_9_10.get(String.valueOf(Glass_Facing3.getSelectedItem()), String.valueOf(Building_Construction.getSelectedItem()));
                	CLF3=Table_9_10[No_R][Integer.valueOf(Solar_time.getText())] ;
                	No_R=R_9_10.get(String.valueOf(Glass_Facing4.getSelectedItem()), String.valueOf(Building_Construction.getSelectedItem()));
                	CLF4=Table_9_10[No_R][Integer.valueOf(Solar_time.getText())] ;
                }
                else {
                	No_R=R_9_11.get( Fenestration_Facing.getSelectedItem());
                	CLF1=Table_9_11[No_R][Integer.valueOf(Solar_time.getText())] ;
                }	
				
			
				
				Qglass1= Double.valueOf( AGlass1.getText())* SHG1 * SC * CLF1;
				Qglass2= Double.valueOf( AGlass2.getText())* SHG2 * SC * CLF2;
				Qglass3= Double.valueOf( AGlass3.getText())* SHG3 * SC * CLF3;
				Qglass4= Double.valueOf( AGlass4.getText())* SHG4 * SC * CLF4;
				
				qtrans_throng_glass=Qglass1+Qglass2+Qglass3+Qglass4;
				Qtrans_throng_glass.setText(String.valueOf(qtrans_throng_glass)  );
				//4 -----------------------------------------------------
				 
				double qconv_H_Gain=0,C_TD_con_win=0 ,C_TD_win=0 ,Qwin1=0,Qwin2=0,Qwin3=0,Qwin4=0;   ;
				C_TD_win=Table_9_12[Integer.valueOf(Solar_time.getText())];
				C_TD_con_win=C_TD_win+(25.5 - Ti) + (T0-29.4);
				
				 
				 
				 Qwin1= Uwin* Double.valueOf(Awin1.getText())  * C_TD_con_win;
				 Qwin2= Uwin* Double.valueOf(Awin2.getText())  * C_TD_con_win;
				 Qwin3= Uwin* Double.valueOf(Awin3.getText())  * C_TD_con_win;
				 Qwin4= Uwin* Double.valueOf(Awin4.getText())  * C_TD_con_win;
				 
				 qconv_H_Gain=Qwin1+Qwin2+Qwin3+Qwin4;
				 Qconv_H_Gain.setText(String.valueOf(qconv_H_Gain)  );
				//5 -----------------------------------------------------
				 QL_people_cooling.setText(String.valueOf( output4 * n )  );
				//6 -----------------------------------------------------
				 double CLF12=0,qL_people_cooling;
				 CLF12=Table_9_16[Integer.valueOf( Hours_after_each_into_space.getText())][Integer.valueOf( Total_Hours_space.getText())];
				 qL_people_cooling=output3 * n *CLF12;
				 QS_people_cooling.setText(String.valueOf(qL_people_cooling)  );
				//7 -----------------------------------------------------
				  double CLF_light=0 , qlighting=0;
				  No_C= C_9_16.get(String.valueOf( x_y.getSelectedItem()),String.valueOf(_10_16.getSelectedItem() ));
				  
				  CLF_light=Table_9_14[Integer.valueOf( number_of_hoursr_after_lights.getText())][No_C];
				  
				  qlighting=Double.valueOf(W_Lihting_Capacity.getText() ) * CLF_light;
				  Qlighting.setText(String.valueOf(qlighting )  );
				//8 -----------------------------------------------------
				  double qs=0 , Qs=0 , CLF_8=0;
				  int runhour,numberofhour;
				 
				   qs=Table_9_13[R_9_13.get(Application_of_Equipment.getSelectedItem())][C_9_13.get(String.valueOf(Hood.getSelectedItem()), "Sensible")];
				   runhour=Integer.valueOf(run_hour.getText());
				   numberofhour=Integer.valueOf(number_of_hour.getText());				   
				   if(hooded_un.getSelectedItem().equals("hooded")) {
					   CLF_8=table_A_3a[runhour][numberofhour];  
				   }
				   else {
					   CLF_8=table_A_3b[runhour][numberofhour];  
				   }
				  // CLF_8 =
				   Qs=qs*CLF_8;
				   QS_Equipment.setText(String.valueOf(Qs) );
				   //9 ----------------------------------------------------- 
				   double qL=0 ;
					 
				   qL=Table_9_13[R_9_13.get(Application_of_Equipment.getSelectedItem())]
						   [C_9_13.get(String.valueOf(Hood.getSelectedItem()), "Latent")];
				   QL_quipment.setText(String.valueOf(qL) );
				 
			}
		
		});
		btnNewButton.setBounds(1161, 548, 140, 52);
		frame.getContentPane().add(btnNewButton);

		
		

		
		
		


		
	

		
		
	
		
	
		
		

		
		
		
		
		
		
	
		
		
		
		
		
		
	
		
		 
		
		
		
		
	
		
		
		
	}
}
